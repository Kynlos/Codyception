{
  "commands": {
    "explain-code-flow": {
      "description": "explain-code-flow",
      "prompt": "Explain the logical flow of the code, focusing on how each section contributes to the overall functionality. Assume the audience is an experienced programmer.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "algorithm-analysis": {
      "description": "algorithm-analysis",
      "prompt": "Analyze and document the algorithms used in the code, detailing their efficiency and how they achieve their intended purpose.",
      "context": {
        "openTabs": true
      }
    },
    "error-handling-explanation": {
      "description": "error-handling-explanation",
      "prompt": "Elaborate on the error handling mechanisms in the code, explaining how potential issues are identified and addressed.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "concurrency-parallelism-overview": {
      "description": "concurrency-parallelism-overview",
      "prompt": "Provide an overview of any concurrency or parallelism concepts used in the code, emphasizing their role in optimizing performance.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "data-structure-discussion": {
      "description": "data-structure-discussion",
      "prompt": "Discuss the choice of data structures in the code, highlighting their suitability for the given problem and any alternatives that could be considered.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-extensibility-assessment": {
      "description": "code-extensibility-assessment",
      "prompt": "Evaluate the code for extensibility, proposing ways to make it more modular and accommodating for future enhancements.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "testing-strategy-explanation": {
      "description": "testing-strategy-explanation",
      "prompt": "Explain the testing strategy employed in the code, emphasizing its comprehensiveness and suggesting improvements for better coverage.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "performance-profiling-request": {
      "description": "performance-profiling-request",
      "prompt": "Request a performance profiling analysis for the code, outlining areas that may benefit from optimization to enhance overall efficiency.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "dependency-library-justification": {
      "description": "dependency-library-justification",
      "prompt": "Justify the choice of external dependencies or libraries in the code, detailing how they contribute to the project's goals.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-review-checklist-integration": {
      "description": "code-review-checklist-integration",
      "prompt": "Integrate a code review checklist into the existing code documentation, covering aspects like style, security, and best practices.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "security-analysis-overview": {
      "description": "security-analysis-overview",
      "prompt": "Conduct a thorough security analysis of the code, outlining any vulnerabilities and detailing the implemented security measures.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "user-documentation-review": {
      "description": "user-documentation-review",
      "prompt": "Evaluate the user documentation for the code, suggesting improvements to enhance user understanding and experience.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "code-optimization-recommendations": {
      "description": "code-optimization-recommendations",
      "prompt": "Identify opportunities for code optimization, proposing changes that can improve performance without sacrificing functionality.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "accessibility-compliance-check": {
      "description": "accessibility-compliance-check",
      "prompt": "Conduct an accessibility compliance check on the code, addressing any issues to enhance inclusivity.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "documentation-maintenance-guidelines": {
      "description": "documentation-maintenance-guidelines",
      "prompt": "Establish guidelines for maintaining documentation, ensuring it reflects the current state of the code and its functionalities.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "code-reuse-analysis": {
      "description": "code-reuse-analysis",
      "prompt": "Analyze the code for opportunities to promote code reuse, identifying modules or functions that can be generalized for broader application.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "code-deployment-strategy": {
      "description": "code-deployment-strategy",
      "prompt": "Provide insights into the code deployment strategy, covering versioning, rollback procedures, and considerations for different deployment environments.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "documentation-consistency-review": {
      "description": "documentation-consistency-review",
      "prompt": "Review all documentation for consistency, addressing any discrepancies in coding standards, naming conventions, or formatting.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "compliance-and-legal-check": {
      "description": "compliance-and-legal-check",
      "prompt": "Verify code compliance with legal requirements, addressing any issues related to licensing or regulatory compliance.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "continuous-integration-recommendations": {
      "description": "continuous-integration-recommendations",
      "prompt": "Propose strategies for integrating continuous integration practices into the code development workflow, emphasizing automation and efficiency gains.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "code-architecture-evaluation": {
      "description": "code-architecture-evaluation",
      "prompt": "Evaluate the overall code architecture, identifying strengths, weaknesses, and potential improvements for better scalability and maintainability.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "logging-strategy-review": {
      "description": "logging-strategy-review",
      "prompt": "Review the logging strategy implemented in the code, ensuring it provides sufficient information for troubleshooting and debugging.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-naming-conventions-check": {
      "description": "code-naming-conventions-check",
      "prompt": "Check the adherence to code naming conventions, suggesting improvements for consistency and clarity.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-review-best-practices": {
      "description": "code-review-best-practices",
      "prompt": "Provide a comprehensive guide on best practices for conducting effective and constructive code reviews within the development team.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "containerization-assessment": {
      "description": "containerization-assessment",
      "prompt": "Assess the feasibility and benefits of containerization for the codebase, outlining the potential advantages and challenges.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "code-maintainability-check": {
      "description": "code-maintainability-check",
      "prompt": "Evaluate the code for maintainability, suggesting improvements to enhance long-term manageability and reduce technical debt.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "integration-testing-strategy": {
      "description": "integration-testing-strategy",
      "prompt": "Define a comprehensive integration testing strategy for the code, ensuring seamless collaboration between different components.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-documentation-standards": {
      "description": "code-documentation-standards",
      "prompt": "Establish and document coding standards for inline comments and documentation to ensure consistency across the entire codebase.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-versioning-guidelines": {
      "description": "code-versioning-guidelines",
      "prompt": "Define guidelines for code versioning, including branching strategies and release management practices, to streamline collaboration.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "python-ml-model-evaluation": {
      "description": "python-ml-model-evaluation",
      "prompt": "Given the Python codebase and selection, analyze and evaluate the performance of the machine learning model. Consider metrics like accuracy, precision, recall, and F1 score. Provide insights into areas for improvement.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-fine-tuning-strategy": {
      "description": "llm-fine-tuning-strategy",
      "prompt": "Examine the Python code and selection to define a fine-tuning strategy for a Large Language Model (LLM). Outline the steps and parameters to optimize performance, especially for specific tasks.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-feature-engineering": {
      "description": "python-ml-feature-engineering",
      "prompt": "Within the provided Python codebase and selection, implement feature engineering techniques for a machine learning model. Address data preprocessing, transformation, and extraction for improved model performance.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-customization-guide": {
      "description": "llm-customization-guide",
      "prompt": "Based on the Python code and selection, create a guide on customizing a Large Language Model (LLM). Provide insights into adjusting parameters and incorporating domain-specific vocabulary for effective customization.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-hyperparameter-tuning": {
      "description": "python-ml-hyperparameter-tuning",
      "prompt": "Within the Python codebase and selection, implement hyperparameter tuning techniques. Optimize the parameters of the machine learning model for enhanced performance and provide documentation on the changes made.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-context-awareness": {
      "description": "llm-context-awareness",
      "prompt": "Analyze the provided Python code and selection to enhance the context awareness of a Large Language Model (LLM). Consider contextual cues for more accurate language understanding and provide recommendations.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-model-deployment": {
      "description": "python-ml-model-deployment",
      "prompt": "Given the Python codebase and selection, develop a deployment strategy for the machine learning model. Consider scalability, efficiency, and integration with other systems. Provide clear steps for deployment.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-transfer-learning-implementation": {
      "description": "llm-transfer-learning-implementation",
      "prompt": "Analyze the Python codebase and selection to implement transfer learning techniques for a Large Language Model (LLM). Leverage pre-trained models for specific tasks and document the transfer learning process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-anomaly-detection": {
      "description": "python-ml-anomaly-detection",
      "prompt": "Within the provided Python codebase and selection, implement anomaly detection algorithms for the machine learning model. Identify unusual patterns and outliers in the data, and provide documentation on the implementation.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-contextual-generation-strategy": {
      "description": "llm-contextual-generation-strategy",
      "prompt": "Based on the Python code and selection, define a strategy for generating contextual language with a Large Language Model (LLM). Consider diverse scenarios and applications. Provide clear implementation steps.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-model-interpretability": {
      "description": "python-ml-model-interpretability",
      "prompt": "Within the Python codebase and selection, enhance the interpretability of the machine learning model. Incorporate techniques to explain model predictions and decisions. Provide detailed documentation on the changes made.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-ethical-ai-guidelines": {
      "description": "llm-ethical-ai-guidelines",
      "prompt": "Analyze the Python code and selection to create ethical AI guidelines for the development and deployment of Large Language Models (LLMs). Address bias, fairness, and transparency. Provide clear recommendations.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-model-monitoring": {
      "description": "python-ml-model-monitoring",
      "prompt": "Given the Python codebase and selection, implement a model monitoring system for machine learning models. Track performance metrics and detect deviations over time. Document the monitoring setup and configuration.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-multimodal-learning-implementation": {
      "description": "llm-multimodal-learning-implementation",
      "prompt": "Analyze the Python codebase and selection to integrate multimodal learning techniques into a Large Language Model (LLM). Handle multiple types of data (e.g., text and images) for improved understanding. Provide detailed implementation steps.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-online-learning-strategy": {
      "description": "python-ml-online-learning-strategy",
      "prompt": "Based on the provided Python codebase and selection, develop a strategy for online learning. Update machine learning models dynamically based on new data streams or changing patterns. Provide clear guidelines for implementation.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-conversational-ai-enhancement": {
      "description": "llm-conversational-ai-enhancement",
      "prompt": "Analyze the Python code and selection to enhance the conversational abilities of a Large Language Model (LLM). Consider natural language understanding and generation for improved interactions. Provide clear implementation steps.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-distributed-training": {
      "description": "python-ml-distributed-training",
      "prompt": "Within the provided Python codebase and selection, implement distributed training techniques for machine learning models. Optimize training speed and efficiency across multiple compute resources. Provide detailed documentation on the implementation.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-transfer-learning-guidelines": {
      "description": "python-ml-transfer-learning-guidelines",
      "prompt": "Analyze the Python codebase and selection to provide guidelines on implementing transfer learning for machine learning models. Address best practices and considerations for effective transfer learning.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "llm-code-generation-enhancement": {
      "description": "llm-code-generation-enhancement",
      "prompt": "Based on the Python code and selection, enhance the code generation capabilities of a Large Language Model (LLM). Consider context-aware code suggestions and improvements. Provide clear implementation steps.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "python-ml-reinforcement-learning-implementation": {
      "description": "python-ml-reinforcement-learning-implementation",
      "prompt": "Analyze the provided Python codebase and selection to implement reinforcement learning techniques for machine learning models. Optimize models based on rewards and feedback. Provide clear documentation on the reinforcement learning process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-python-to-java": {
      "description": "code-conversion-python-to-java",
      "prompt": "Given the provided Python codebase and selection, perform a comprehensive conversion to Java. Ensure functionality equivalence and address language-specific nuances. Provide documentation on the conversion process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-java-to-python": {
      "description": "code-conversion-java-to-python",
      "prompt": "Analyze the provided Java codebase and selection, and convert it to Python. Ensure a smooth transition while maintaining functionality. Address language-specific differences. Document the conversion process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-csharp-to-python": {
      "description": "code-conversion-csharp-to-python",
      "prompt": "Given the provided C# codebase and selection, perform a thorough conversion to Python. Ensure functionality remains intact and handle language-specific variations. Provide detailed documentation on the conversion.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-python-to-csharp": {
      "description": "code-conversion-python-to-csharp",
      "prompt": "Analyze the Python codebase and selection, and convert it to C#. Ensure functionality equivalence and address language-specific differences. Provide clear documentation on the conversion process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-java-to-csharp": {
      "description": "code-conversion-java-to-csharp",
      "prompt": "Given the Java codebase and selection, perform a comprehensive conversion to C#. Ensure functionality equivalence and handle language-specific nuances. Document the conversion process for future reference.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-csharp-to-java": {
      "description": "code-conversion-csharp-to-java",
      "prompt": "Analyze the provided C# codebase and selection, and convert it to Java. Ensure a seamless transition while maintaining functionality. Document the conversion process to facilitate understanding.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-python-to-js": {
      "description": "code-conversion-python-to-js",
      "prompt": "Given the Python codebase and selection, perform a comprehensive conversion to JavaScript. Ensure functional parity and address language-specific differences. Document the conversion process for clarity.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-js-to-python": {
      "description": "code-conversion-js-to-python",
      "prompt": "Analyze the provided JavaScript codebase and selection, and convert it to Python. Ensure a smooth transition and maintain functionality. Provide detailed documentation on the conversion process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-java-to-js": {
      "description": "code-conversion-java-to-js",
      "prompt": "Given the Java codebase and selection, perform a thorough conversion to JavaScript. Ensure functional equivalence and address language-specific nuances. Document the conversion process comprehensively.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-js-to-java": {
      "description": "code-conversion-js-to-java",
      "prompt": "Analyze the provided JavaScript codebase and selection, and convert it to Java. Ensure a seamless transition while maintaining functionality. Provide clear and detailed documentation on the conversion process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-csharp-to-js": {
      "description": "code-conversion-csharp-to-js",
      "prompt": "Given the provided C# codebase and selection, perform a comprehensive conversion to JavaScript. Ensure functionality equivalence and handle language-specific differences. Document the conversion process in detail.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-js-to-csharp": {
      "description": "code-conversion-js-to-csharp",
      "prompt": "Analyze the provided JavaScript codebase and selection, and convert it to C#. Ensure a smooth transition and maintain functionality. Provide detailed documentation on the conversion process for clarity.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-python-to-typescript": {
      "description": "code-conversion-python-to-typescript",
      "prompt": "Given the Python codebase and selection, perform a comprehensive conversion to TypeScript. Ensure functional parity and address language-specific differences. Document the conversion process for future reference.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-typescript-to-python": {
      "description": "code-conversion-typescript-to-python",
      "prompt": "Analyze the provided TypeScript codebase and selection, and convert it to Python. Ensure a smooth transition and maintain functionality. Provide detailed documentation on the conversion process for clarity.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-java-to-typescript": {
      "description": "code-conversion-java-to-typescript",
      "prompt": "Given the Java codebase and selection, perform a thorough conversion to TypeScript. Ensure functional equivalence and address language-specific nuances. Document the conversion process comprehensively.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-typescript-to-java": {
      "description": "code-conversion-typescript-to-java",
      "prompt": "Analyze the provided TypeScript codebase and selection, and convert it to Java. Ensure a seamless transition while maintaining functionality. Provide clear and detailed documentation on the conversion process.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-csharp-to-typescript": {
      "description": "code-conversion-csharp-to-typescript",
      "prompt": "Given the provided C# codebase and selection, perform a comprehensive conversion to TypeScript. Ensure functionality equivalence and handle language-specific differences. Document the conversion process in detail.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-conversion-typescript-to-csharp": {
      "description": "code-conversion-typescript-to-csharp",
      "prompt": "Analyze the provided TypeScript codebase and selection, and convert it to C#. Ensure a smooth transition and maintain functionality. Provide detailed documentation on the conversion process for clarity.",
      "context": {
        "codebase": true,
        "selection": true,
        "currentFile": true
      }
    },
    "code-exploration-overview": {
      "description": "code-exploration-overview",
      "prompt": "Provide a high-level overview of the entire codebase, highlighting key components, modules, and their interconnections. Offer insights into the code's architecture and organization.",
      "context": {
        "codebase": true
      }
    },
    "code-structure-analysis": {
      "description": "code-structure-analysis",
      "prompt": "Analyze the overall structure of the codebase, focusing on directory organization, naming conventions, and file relationships. Offer suggestions for improving code organization.",
      "context": {
        "codebase": true
      }
    },
    "code-dependency-visualization": {
      "description": "code-dependency-visualization",
      "prompt": "Generate a visual representation of code dependencies, illustrating how different modules or components depend on each other. Provide insights into the relationships within the codebase.",
      "context": {
        "codebase": true
      }
    },
    "code-commentary-request": {
      "description": "code-commentary-request",
      "prompt": "Request comprehensive comments within the codebase to explain key functionalities, algorithms, and decision points. Encourage commenting for clarity and future reference.",
      "context": {
        "codebase": true
      }
    },
    "code-variable-naming-guidelines": {
      "description": "code-variable-naming-guidelines",
      "prompt": "Provide guidelines for consistent and meaningful variable naming conventions throughout the codebase. Emphasize the importance of clear and descriptive variable names.",
      "context": {
        "codebase": true
      }
    },
    "code-function-documentation": {
      "description": "code-function-documentation",
      "prompt": "Encourage thorough documentation for functions and methods, including input parameters, expected outputs, and usage examples. Foster a habit of documenting code functionality.",
      "context": {
        "codebase": true
      }
    },
    "code-testing-introduction": {
      "description": "code-testing-introduction",
      "prompt": "Introduce the basics of code testing, covering unit tests, integration tests, and test-driven development (TDD). Provide guidance on writing effective tests for the codebase.",
      "context": {
        "codebase": true
      }
    },
    "code-debugging-techniques": {
      "description": "code-debugging-techniques",
      "prompt": "Offer guidance on effective debugging techniques, including the use of breakpoints, logging, and debugging tools. Assist in identifying and resolving common coding errors.",
      "context": {
        "codebase": true
      }
    },
    "code-version-control-overview": {
      "description": "code-version-control-overview",
      "prompt": "Provide an overview of version control systems (e.g., Git) used in the codebase. Explain basic version control concepts and best practices for collaborative development.",
      "context": {
        "codebase": true
      }
    },
    "code-review-basics": {
      "description": "code-review-basics",
      "prompt": "Introduce the basics of code review, including the importance of constructive feedback, adherence to coding standards, and collaborative improvement. Encourage a positive code review culture.",
      "context": {
        "codebase": true
      }
    },
    "code-readability-guidelines": {
      "description": "code-readability-guidelines",
      "prompt": "Provide guidelines for writing readable code, emphasizing consistent indentation, clear comments, and concise yet expressive syntax. Promote practices that enhance code readability.",
      "context": {
        "codebase": true
      }
    },
    "code-design-patterns-introduction": {
      "description": "code-design-patterns-introduction",
      "prompt": "Introduce common design patterns used in the codebase, explaining their purpose and advantages. Encourage the application of design patterns for scalable and maintainable code.",
      "context": {
        "codebase": true
      }
    },
    "code-security-awareness": {
      "description": "code-security-awareness",
      "prompt": "Raise awareness about code security best practices, including input validation, secure coding principles, and protection against common vulnerabilities. Emphasize the importance of writing secure code.",
      "context": {
        "codebase": true
      }
    },
    "code-performance-optimization-tips": {
      "description": "code-performance-optimization-tips",
      "prompt": "Offer tips and techniques for optimizing code performance, including algorithmic improvements, caching strategies, and resource management. Aim to enhance the overall efficiency of the codebase.",
      "context": {
        "codebase": true
      }
    },
    "code-documentation-navigation": {
      "description": "code-documentation-navigation",
      "prompt": "Guide users on effective navigation through code documentation. Demonstrate how to find relevant information, understand code structure, and use documentation for efficient coding.",
      "context": {
        "codebase": true
      }
    },
    "code-collaboration-strategies": {
      "description": "code-collaboration-strategies",
      "prompt": "Provide strategies for effective code collaboration, covering communication channels, collaboration tools, and best practices for working together on the codebase. Foster a collaborative development environment.",
      "context": {
        "codebase": true
      }
    },
    "code-maintenance-guidelines": {
      "description": "code-maintenance-guidelines",
      "prompt": "Establish guidelines for code maintenance, emphasizing the importance of keeping code up-to-date, addressing technical debt, and following a consistent code maintenance routine.",
      "context": {
        "codebase": true
      }
    },
    "code-learning-resources": {
      "description": "code-learning-resources",
      "prompt": "Compile a list of recommended learning resources, tutorials, and documentation to help users enhance their understanding of coding concepts and improve their skills.",
      "context": {
        "codebase": true
      }
    },
    "code-architecture-diagram": {
      "description": "code-architecture-diagram",
      "prompt": "Generate a visual diagram illustrating the architecture of the codebase. Highlight major components, their interactions, and the overall flow of data or control within the system.",
      "context": {
        "codebase": true
      }
    },
    "code-error-message-improvement": {
      "description": "code-error-message-improvement",
      "prompt": "Identify areas where error messages can be improved within the codebase. Offer suggestions for clearer and more informative error messages to aid debugging and troubleshooting.",
      "context": {
        "codebase": true
      }
    },
    "code-quality-assessment": {
      "description": "code-quality-assessment",
      "prompt": "Conduct a comprehensive assessment of code quality in the provided codebase. Evaluate adherence to coding standards, identify potential code smells, and propose improvements for enhanced maintainability.",
      "context": {
        "codebase": true
      }
    },
    "code-migration-strategy": {
      "description": "code-migration-strategy",
      "prompt": "Develop a strategy for migrating the codebase to a new framework, language, or architecture. Consider potential challenges, dependencies, and gradual migration approaches.",
      "context": {
        "codebase": true
      }
    },
    "codebase-performance-tuning": {
      "description": "codebase-performance-tuning",
      "prompt": "Analyze the codebase and provide suggestions for optimizing performance, including algorithmic improvements and resource management.",
      "context": {
        "codebase": true
      }
    },
    "codebase-memory-usage-analysis": {
      "description": "codebase-memory-usage-analysis",
      "prompt": "Evaluate memory usage patterns within the codebase and propose strategies for efficient memory management.",
      "context": {
        "codebase": true
      }
    },
    "codebase-database-query-optimization": {
      "description": "codebase-database-query-optimization",
      "prompt": "Optimize database queries in the codebase for improved efficiency, considering indexing, query structure, and caching.",
      "context": {
        "codebase": true
      }
    },
    "codebase-internationalization-assessment": {
      "description": "codebase-internationalization-assessment",
      "prompt": "Assess the codebase for internationalization readiness, identifying areas for language support and localization.",
      "context": {
        "codebase": true
      }
    },
    "codebase-microservices-integration": {
      "description": "codebase-microservices-integration",
      "prompt": "Guide the integration of microservices into the codebase, addressing communication protocols, service discovery, and fault tolerance.",
      "context": {
        "codebase": true
      }
    },
    "codebase-serverless-architecture-evaluation": {
      "description": "codebase-serverless-architecture-evaluation",
      "prompt": "Evaluate the suitability of serverless architecture for the codebase, considering scalability, cost-effectiveness, and event-driven design.",
      "context": {
        "codebase": true
      }
    },
    "codebase-containerization-strategy": {
      "description": "codebase-containerization-strategy",
      "prompt": "Develop a strategy for containerizing the codebase using technologies like Docker, ensuring consistency across environments.",
      "context": {
        "codebase": true
      }
    },
    "codebase-api-design-review": {
      "description": "codebase-api-design-review",
      "prompt": "Review the design of APIs within the codebase, providing recommendations for RESTful principles, versioning, and documentation.",
      "context": {
        "codebase": true
      }
    },
    "codebase-graphql-integration": {
      "description": "codebase-graphql-integration",
      "prompt": "Guide the integration of GraphQL into the codebase, considering schema design, query optimization, and data fetching strategies.",
      "context": {
        "codebase": true
      }
    },
    "codebase-websocket-implementation": {
      "description": "codebase-websocket-implementation",
      "prompt": "Assist in implementing WebSocket communication within the codebase for real-time features, such as chat or live updates.",
      "context": {
        "codebase": true
      }
    },
    "codebase-event-driven-architecture-assessment": {
      "description": "codebase-event-driven-architecture-assessment",
      "prompt": "Assess the codebase for event-driven architecture, providing recommendations for handling asynchronous communication and scalability.",
      "context": {
        "codebase": true
      }
    },
    "codebase-ai-model-integration": {
      "description": "codebase-ai-model-integration",
      "prompt": "Guide the integration of machine learning models into the codebase, addressing model deployment, inference, and monitoring.",
      "context": {
        "codebase": true
      }
    },
    "codebase-continuous-integration-deployment-pipeline-setup": {
      "description": "codebase-continuous-integration-deployment-pipeline-setup",
      "prompt": "Set up a CI/CD pipeline for the codebase, automating build, testing, and deployment processes for efficient development workflows.",
      "context": {
        "codebase": true
      }
    },
    "codebase-cloud-service-integration": {
      "description": "codebase-cloud-service-integration",
      "prompt": "Integrate cloud services (e.g., AWS, Azure, GCP) into the codebase, optimizing for scalability, security, and cost-effectiveness.",
      "context": {
        "codebase": true
      }
    },
    "codebase-progressive-web-app-implementation": {
      "description": "codebase-progressive-web-app-implementation",
      "prompt": "Guide the implementation of Progressive Web App features in the codebase, enhancing web application performance and user experience.",
      "context": {
        "codebase": true
      }
    },
    "codebase-blockchain-integration-strategy": {
      "description": "codebase-blockchain-integration-strategy",
      "prompt": "Develop a strategy for integrating blockchain technology into the codebase, addressing smart contract development and decentralized applications.",
      "context": {
        "codebase": true
      }
    },
    "codebase-augmented-reality-integration": {
      "description": "codebase-augmented-reality-integration",
      "prompt": "Guide the integration of augmented reality features into the codebase, enhancing user interactions through AR experiences.",
      "context": {
        "codebase": true
      }
    },
    "codebase-chatbot-integration": {
      "description": "codebase-chatbot-integration",
      "prompt": "Assist in integrating chatbot functionality into the codebase, considering natural language processing and user interaction patterns.",
      "context": {
        "codebase": true
      }
    },
    "codebase-internet-of-things-integration": {
      "description": "codebase-internet-of-things-integration",
      "prompt": "Guide the integration of IoT devices and sensors into the codebase, addressing data ingestion, processing, and device management.",
      "context": {
        "codebase": true
      }
    },
    "codebase-quantum-computing-exploration": {
      "description": "codebase-quantum-computing-exploration",
      "prompt": "Explore potential use cases for integrating quantum computing concepts into the codebase, considering quantum algorithms and quantum-safe cryptography.",
      "context": {
        "codebase": true
      }
    },
    "python-pandas-tips": {
      "description": "python-pandas-tips",
      "prompt": "Provide tips and best practices for using the Pandas library in Python. Cover data manipulation, cleaning, and analysis techniques.",
      "context": {
        "codebase": true
      }
    },
    "python-numpy-tricks": {
      "description": "python-numpy-tricks",
      "prompt": "Offer advanced tips and tricks for efficient numerical operations using the NumPy library in Python. Explore array manipulation and mathematical functions.",
      "context": {
        "codebase": true
      }
    },
    "python-matplotlib-customization": {
      "description": "python-matplotlib-customization",
      "prompt": "Guide customization of Matplotlib plots in Python. Explore techniques for adjusting colors, styles, and annotations for effective data visualization.",
      "context": {
        "codebase": true
      }
    },
    "python-requests-library-usage": {
      "description": "python-requests-library-usage",
      "prompt": "Demonstrate effective usage of the Requests library for HTTP requests in Python. Cover authentication, handling responses, and error handling.",
      "context": {
        "codebase": true
      }
    },
    "python-beautifulsoup-web-scraping": {
      "description": "python-beautifulsoup-web-scraping",
      "prompt": "Guide web scraping using the BeautifulSoup library in Python. Cover HTML parsing, element extraction, and navigating document structures.",
      "context": {
        "codebase": true
      }
    },
    "python-django-models-guide": {
      "description": "python-django-models-guide",
      "prompt": "Provide a comprehensive guide on creating and working with Django models in Python. Cover model fields, relationships, and queries.",
      "context": {
        "codebase": true
      }
    },
    "python-flask-api-development": {
      "description": "python-flask-api-development",
      "prompt": "Assist in developing RESTful APIs using the Flask framework in Python. Cover routing, request handling, and response formatting.",
      "context": {
        "codebase": true
      }
    },
    "python-sqlalchemy-database-interaction": {
      "description": "python-sqlalchemy-database-interaction",
      "prompt": "Guide interaction with databases using SQLAlchemy in Python. Cover model definition, querying, and transactions.",
      "context": {
        "codebase": true
      }
    },
    "python-fastapi-guide": {
      "description": "python-fastapi-guide",
      "prompt": "Provide a guide on building APIs with FastAPI in Python. Cover dependency injection, request validation, and automatic documentation.",
      "context": {
        "codebase": true
      }
    },
    "python-scikit-learn-machine-learning": {
      "description": "python-scikit-learn-machine-learning",
      "prompt": "Assist in implementing machine learning models using Scikit-Learn in Python. Cover data preprocessing, model training, and evaluation.",
      "context": {
        "codebase": true
      }
    },
    "python-tensorflow-model-development": {
      "description": "python-tensorflow-model-development",
      "prompt": "Guide the development of machine learning models using TensorFlow in Python. Cover model architecture, training, and deployment.",
      "context": {
        "codebase": true
      }
    },
    "python-pytorch-deep-learning": {
      "description": "python-pytorch-deep-learning",
      "prompt": "Assist in implementing deep learning models with PyTorch in Python. Cover tensor manipulation, model definition, and training.",
      "context": {
        "codebase": true
      }
    },
    "python-keras-neural-networks": {
      "description": "python-keras-neural-networks",
      "prompt": "Guide the implementation of neural networks using Keras in Python. Cover model building, training, and fine-tuning.",
      "context": {
        "codebase": true
      }
    },
    "python-redis-cache-implementation": {
      "description": "python-redis-cache-implementation",
      "prompt": "Demonstrate the implementation of caching using Redis in Python. Cover key-value storage, expiration policies, and cache integration.",
      "context": {
        "codebase": true
      }
    },
    "python-selenium-web-automation": {
      "description": "python-selenium-web-automation",
      "prompt": "Guide web automation using Selenium in Python. Cover browser automation, element interaction, and handling dynamic web pages.",
      "context": {
        "codebase": true
      }
    },
    "python-pygame-game-development": {
      "description": "python-pygame-game-development",
      "prompt": "Assist in game development using Pygame in Python. Cover sprite handling, game loops, and user input processing.",
      "context": {
        "codebase": true
      }
    },
    "python-openai-gpt-3-integration": {
      "description": "python-openai-gpt-3-integration",
      "prompt": "Guide the integration of OpenAI's GPT-3 into Python applications. Cover API usage, response handling, and creative implementations.",
      "context": {
        "codebase": true
      }
    },
    "python-twitter-api-interaction": {
      "description": "python-twitter-api-interaction",
      "prompt": "Demonstrate interaction with the Twitter API using Python. Cover authentication, tweet retrieval, and posting.",
      "context": {
        "codebase": true
      }
    },
    "python-google-maps-api-integration": {
      "description": "python-google-maps-api-integration",
      "prompt": "Guide the integration of Google Maps API into Python applications. Cover geocoding, mapping, and location-based services.",
      "context": {
        "codebase": true
      }
    },
    "python-aws-sdk-integration": {
      "description": "python-aws-sdk-integration",
      "prompt": "Assist in integrating the AWS SDK into Python applications. Cover services such as S3, DynamoDB, and Lambda.",
      "context": {
        "codebase": true
      }
    },
    "python-aws-lambda-deployment": {
      "description": "python-aws-lambda-deployment",
      "prompt": "Guide the deployment of Python functions as AWS Lambda. Cover packaging, configuration, and serverless architecture best practices.",
      "context": {
        "codebase": true
      }
    },
    "python-dash-data-visualization": {
      "description": "python-dash-data-visualization",
      "prompt": "Assist in creating interactive data visualizations using Dash in Python. Cover layout design, callback functions, and data presentation.",
      "context": {
        "codebase": true
      }
    },
    "python-docker-containerization": {
      "description": "python-docker-containerization",
      "prompt": "Guide the containerization of Python applications using Docker. Cover Dockerfile creation, image building, and container orchestration.",
      "context": {
        "codebase": true
      }
    },
    "python-graphql-api-development": {
      "description": "python-graphql-api-development",
      "prompt": "Assist in developing APIs with GraphQL in Python. Cover schema definition, queries, mutations, and resolver functions.",
      "context": {
        "codebase": true
      }
    },
    "python-kubernetes-deployment": {
      "description": "python-kubernetes-deployment",
      "prompt": "Guide the deployment of Python applications on Kubernetes. Cover pod definition, deployment strategies, and scaling.",
      "context": {
        "codebase": true
      }
    },
    "python-azure-sdk-integration": {
      "description": "python-azure-sdk-integration",
      "prompt": "Assist in integrating the Azure SDK into Python applications. Cover services such as Blob Storage, Cosmos DB, and Azure Functions.",
      "context": {
        "codebase": true
      }
    },
    "python-streamlit-app-development": {
      "description": "python-streamlit-app-development",
      "prompt": "Guide the development of interactive web apps with Streamlit in Python. Cover layout design, widgets, and data visualization.",
      "context": {
        "codebase": true
      }
    },
    "python-asyncio-programming": {
      "description": "python-asyncio-programming",
      "prompt": "Provide guidance on asynchronous programming with asyncio in Python. Cover coroutines, event loops, and concurrent tasks.",
      "context": {
        "codebase": true
      }
    },
    "python-opencv-image-processing": {
      "description": "python-opencv-image-processing",
      "prompt": "Assist in image processing tasks using OpenCV in Python. Cover image loading, manipulation, and feature extraction.",
      "context": {
        "codebase": true
      }
    },
    "python-regex-pattern-matching": {
      "description": "python-regex-pattern-matching",
      "prompt": "Guide the use of regular expressions for pattern matching in Python. Cover pattern syntax, matching methods, and group extraction.",
      "context": {
        "codebase": true
      }
    },
    "python-twilio-sms-integration": {
      "description": "python-twilio-sms-integration",
      "prompt": "Demonstrate integration of Twilio for sending SMS in Python. Cover authentication, message composition, and error handling.",
      "context": {
        "codebase": true
      }
    },
    "python-selenium-web-testing": {
      "description": "python-selenium-web-testing",
      "prompt": "Guide web testing using Selenium in Python. Cover test setup, execution, and result validation.",
      "context": {
        "codebase": true
      }
    },
    "python-discord-bot-development": {
      "description": "python-discord-bot-development",
      "prompt": "Assist in developing a Discord bot using discord.py in Python. Cover event handling, command processing, and bot deployment.",
      "context": {
        "codebase": true
      }
    },
    "python-geopandas-geospatial-analysis": {
      "description": "python-geopandas-geospatial-analysis",
      "prompt": "Guide geospatial analysis using GeoPandas in Python. Cover spatial data manipulation, visualization, and analysis.",
      "context": {
        "codebase": true
      }
    },
    "python-sqlite-database-interaction": {
      "description": "python-sqlite-database-interaction",
      "prompt": "Guide interaction with SQLite databases in Python. Cover connection establishment, query execution, and transaction management.",
      "context": {
        "codebase": true
      }
    },
    "python-async-api-consumption": {
      "description": "python-async-api-consumption",
      "prompt": "Assist in consuming asynchronous APIs using aiohttp in Python. Cover request handling, response parsing, and error management.",
      "context": {
        "codebase": true
      }
    },
    "python-pytest-testing-framework": {
      "description": "python-pytest-testing-framework",
      "prompt": "Guide the use of the Pytest testing framework in Python. Cover test fixture setup, test discovery, and assertions.",
      "context": {
        "codebase": true
      }
    },
    "python-aiogram-telegram-bot": {
      "description": "python-aiogram-telegram-bot",
      "prompt": "Assist in developing a Telegram bot using Aiogram in Python. Cover message handling, inline queries, and bot deployment.",
      "context": {
        "codebase": true
      }
    },
    "python-plotly-interactive-charts": {
      "description": "python-plotly-interactive-charts",
      "prompt": "Guide the creation of interactive charts using Plotly in Python. Cover figure composition, plot types, and customization.",
      "context": {
        "codebase": true
      }
    },
    "python-google-cloud-sdk-integration": {
      "description": "python-google-cloud-sdk-integration",
      "prompt": "Assist in integrating the Google Cloud SDK into Python applications. Cover services such as Cloud Storage, Firestore, and Cloud Functions.",
      "context": {
        "codebase": true
      }
    },
    "python-pygame-multiplayer-game": {
      "description": "python-pygame-multiplayer-game",
      "prompt": "Assist in developing a multiplayer game using Pygame in Python. Cover networking, synchronization, and multiplayer game mechanics.",
      "context": {
        "codebase": true
      }
    },
    "python-django-rest-framework-guide": {
      "description": "python-django-rest-framework-guide",
      "prompt": "Provide a comprehensive guide on building RESTful APIs with Django Rest Framework in Python. Cover serializers, views, and authentication.",
      "context": {
        "codebase": true
      }
    },
    "python-kivy-app-development": {
      "description": "python-kivy-app-development",
      "prompt": "Guide the development of cross-platform apps using Kivy in Python. Cover UI design, event handling, and app deployment.",
      "context": {
        "codebase": true
      }
    },
    "python-ai-chatbot-development": {
      "description": "python-ai-chatbot-development",
      "prompt": "Assist in developing an AI-powered chatbot in Python. Cover natural language processing, intent recognition, and dialogue management.",
      "context": {
        "codebase": true
      }
    },
    "python-openpyxl-excel-processing": {
      "description": "python-openpyxl-excel-processing",
      "prompt": "Guide Excel processing using Openpyxl in Python. Cover reading and writing Excel files, cell manipulation, and formatting.",
      "context": {
        "codebase": true
      }
    },
    "python-tweepy-twitter-bot": {
      "description": "python-tweepy-twitter-bot",
      "prompt": "Assist in developing a Twitter bot using Tweepy in Python. Cover tweet generation, interaction with mentions, and scheduled posts.",
      "context": {
        "codebase": true
      }
    },
    "python-keras-transfer-learning": {
      "description": "python-keras-transfer-learning",
      "prompt": "Guide the implementation of transfer learning using Keras in Python. Cover model fine-tuning, feature extraction, and transfer strategies.",
      "context": {
        "codebase": true
      }
    },
    "python-mlflow-model-tracking": {
      "description": "python-mlflow-model-tracking",
      "prompt": "Assist in using MLflow for tracking machine learning experiments and managing models in Python. Cover experiment logging, model versioning, and deployment.",
      "context": {
        "codebase": true
      }
    },
    "python-fastapi-websockets": {
      "description": "python-fastapi-websockets",
      "prompt": "Guide the implementation of WebSockets using FastAPI in Python. Cover real-time communication, event handling, and WebSocket endpoints.",
      "context": {
        "codebase": true
      }
    },
    "python-pandas-profiling": {
      "description": "python-pandas-profiling",
      "prompt": "Assist in using Pandas Profiling for automatic exploratory data analysis in Python. Cover report generation, data insights, and visualization.",
      "context": {
        "codebase": true
      }
    },
    "python-redis-pubsub-messaging": {
      "description": "python-redis-pubsub-messaging",
      "prompt": "Guide the implementation of publish/subscribe messaging using Redis in Python. Cover message publishing, subscription, and message handling.",
      "context": {
        "codebase": true
      }
    },
    "python-mlflow-model-deployment": {
      "description": "python-mlflow-model-deployment",
      "prompt": "Assist in deploying machine learning models tracked with MLflow in Python. Cover deployment options, containerization, and serving predictions.",
      "context": {
        "codebase": true
      }
    },
    "python-bokeh-interactive-visualizations": {
      "description": "python-bokeh-interactive-visualizations",
      "prompt": "Guide the creation of interactive visualizations using Bokeh in Python. Cover plot customization, interactive tools, and widget integration.",
      "context": {
        "codebase": true
      }
    },
    "python-pyqt-gui-application": {
      "description": "python-pyqt-gui-application",
      "prompt": "Assist in developing a GUI application using PyQt in Python. Cover widget creation, layout design, and event handling.",
      "context": {
        "codebase": true
      }
    },
    "python-pandas-memory-optimization": {
      "description": "python-pandas-memory-optimization",
      "prompt": "Guide memory optimization techniques for large datasets using Pandas in Python. Cover datatype conversion, chunk processing, and memory profiling.",
      "context": {
        "codebase": true
      }
    },
    "python-nltk-nlp-processing": {
      "description": "python-nltk-nlp-processing",
      "prompt": "Assist in natural language processing tasks using NLTK in Python. Cover tokenization, part-of-speech tagging, and sentiment analysis.",
      "context": {
        "codebase": true
      }
    },
    "python-jupyter-notebook-best-practices": {
      "description": "python-jupyter-notebook-best-practices",
      "prompt": "Provide best practices for effective usage of Jupyter Notebooks in Python. Cover organization, markdown usage, and interactive features.",
      "context": {
        "codebase": true
      }
    },
    "python-django-celery-task-scheduling": {
      "description": "python-django-celery-task-scheduling",
      "prompt": "Guide task scheduling using Celery with Django in Python. Cover task creation, periodic tasks, and distributed processing.",
      "context": {
        "codebase": true
      }
    },
    "python-logging-library-configuration": {
      "description": "python-logging-library-configuration",
      "prompt": "Assist in configuring the Python logging library for effective logging in applications. Cover log levels, formatting, and log handlers.",
      "context": {
        "codebase": true
      }
    },
    "python-mlflow-experiment-reproduction": {
      "description": "python-mlflow-experiment-reproduction",
      "prompt": "Guide the reproduction of machine learning experiments tracked with MLflow in Python. Cover environment setup, dependencies, and experiment cloning.",
      "context": {
        "codebase": true
      }
    },
    "python-flask-restplus-api-documentation": {
      "description": "python-flask-restplus-api-documentation",
      "prompt": "Assist in generating API documentation using Flask-RESTPlus in Python. Cover route documentation, model representation, and Swagger integration.",
      "context": {
        "codebase": true
      }
    },
    "python-spacy-nlp-processing": {
      "description": "python-spacy-nlp-processing",
      "prompt": "Guide natural language processing tasks using spaCy in Python. Cover entity recognition, dependency parsing, and linguistic annotations.",
      "context": {
        "codebase": true
      }
    },
    "python-fastapi-dependency-injection": {
      "description": "python-fastapi-dependency-injection",
      "prompt": "Assist in leveraging dependency injection with FastAPI in Python. Cover dependency declaration, injection scopes, and reusable components.",
      "context": {
        "codebase": true
      }
    },
    "python-sqlalchemy-orm-guide": {
      "description": "python-sqlalchemy-orm-guide",
      "prompt": "Provide a comprehensive guide on using SQLAlchemy ORM in Python. Cover model relationships, queries, and transaction management.",
      "context": {
        "codebase": true
      }
    },
    "python-plotly-dash-dashboard": {
      "description": "python-plotly-dash-dashboard",
      "prompt": "Guide the creation of interactive dashboards using Plotly Dash in Python. Cover layout design, callback functions, and data visualization.",
      "context": {
        "codebase": true
      }
    },
    "python-google-cloud-storage-integration": {
      "description": "python-google-cloud-storage-integration",
      "prompt": "Assist in integrating Google Cloud Storage into Python applications. Cover file uploads, downloads, and storage management.",
      "context": {
        "codebase": true
      }
    },
    "python-azure-cognitive-services-integration": {
      "description": "python-azure-cognitive-services-integration",
      "prompt": "Guide the integration of Azure Cognitive Services into Python applications. Cover vision, speech, and language services.",
      "context": {
        "codebase": true
      }
    },
    "python-regex-validation-patterns": {
      "description": "python-regex-validation-patterns",
      "prompt": "Assist in creating regex patterns for common validation tasks in Python. Cover email validation, phone number formatting, and custom patterns.",
      "context": {
        "codebase": true
      }
    },
    "python-mlflow-hyperparameter-tuning": {
      "description": "python-mlflow-hyperparameter-tuning",
      "prompt": "Guide hyperparameter tuning using MLflow in Python. Cover parameter search space definition, optimization algorithms, and result analysis.",
      "context": {
        "codebase": true
      }
    },
    "python-pandas-data-cleaning": {
      "description": "python-pandas-data-cleaning",
      "prompt": "Assist in cleaning and preprocessing data using Pandas in Python. Cover missing value imputation, data normalization, and transformation.",
      "context": {
        "codebase": true
      }
    },
    "python-asyncio-parallel-task-execution": {
      "description": "python-asyncio-parallel-task-execution",
      "prompt": "Guide parallel task execution using asyncio in Python. Cover concurrent task scheduling, event loop management, and parallelism benefits.",
      "context": {
        "codebase": true
      }
    },
    "python-twitter-api-analytics": {
      "description": "python-twitter-api-analytics",
      "prompt": "Assist in performing analytics on Twitter data using the Twitter API in Python. Cover data retrieval, analysis, and visualization.",
      "context": {
        "codebase": true
      }
    },
    "python-graphql-client-implementation": {
      "description": "python-graphql-client-implementation",
      "prompt": "Guide the implementation of a GraphQL client in Python. Cover query composition, variable usage, and response handling.",
      "context": {
        "codebase": true
      }
    },
    "github-repository-creation": {
      "description": "github-repository-creation",
      "prompt": "Guide the creation of a new repository on GitHub. Cover repository initialization, README creation, and license selection.",
      "context": {
        "codebase": true
      }
    },
    "github-branch-management": {
      "description": "github-branch-management",
      "prompt": "Assist in effective branch management on GitHub. Cover branch creation, merging, rebasing, and handling conflicts.",
      "context": {
        "codebase": true
      }
    },
    "github-pull-request-submission": {
      "description": "github-pull-request-submission",
      "prompt": "Guide the process of submitting a pull request on GitHub. Cover branch selection, description writing, and review requests.",
      "context": {
        "codebase": true
      }
    },
    "github-issue-tracking": {
      "description": "github-issue-tracking",
      "prompt": "Assist in efficient issue tracking on GitHub. Cover issue creation, labeling, assignment, and milestone management.",
      "context": {
        "codebase": true
      }
    },
    "github-code-review-best-practices": {
      "description": "github-code-review-best-practices",
      "prompt": "Provide best practices for effective code reviews on GitHub. Cover reviewing techniques, feedback etiquette, and collaboration.",
      "context": {
        "codebase": true
      }
    },
    "github-actions-ci-cd-setup": {
      "description": "github-actions-ci-cd-setup",
      "prompt": "Guide the setup of continuous integration/continuous deployment (CI/CD) workflows using GitHub Actions. Cover workflow creation, triggers, and deployment strategies.",
      "context": {
        "codebase": true
      }
    },
    "github-code-owners-configuration": {
      "description": "github-code-owners-configuration",
      "prompt": "Assist in configuring code owners for effective code review assignment on GitHub. Cover CODEOWNERS file setup and team assignment.",
      "context": {
        "codebase": true
      }
    },
    "github-repository-settings-optimization": {
      "description": "github-repository-settings-optimization",
      "prompt": "Guide the optimization of repository settings on GitHub. Cover security settings, branch protection, and collaboration permissions.",
      "context": {
        "codebase": true
      }
    },
    "github-releases-versioning": {
      "description": "github-releases-versioning",
      "prompt": "Assist in managing version releases on GitHub. Cover tag creation, release notes drafting, and changelog updates.",
      "context": {
        "codebase": true
      }
    },
    "github-code-scanning-integration": {
      "description": "github-code-scanning-integration",
      "prompt": "Guide the integration of code scanning tools with GitHub. Cover security analysis, vulnerability identification, and remediation.",
      "context": {
        "codebase": true
      }
    },
    "github-discussions-community-engagement": {
      "description": "github-discussions-community-engagement",
      "prompt": "Assist in fostering community engagement through GitHub Discussions. Cover topic creation, moderation, and participation strategies.",
      "context": {
        "codebase": true
      }
    },
    "github-workflow-automation": {
      "description": "github-workflow-automation",
      "prompt": "Guide the automation of repetitive tasks in GitHub workflows. Cover workflow triggers, custom actions, and automation best practices.",
      "context": {
        "codebase": true
      }
    },
    "github-dependabot-configuration": {
      "description": "github-dependabot-configuration",
      "prompt": "Assist in configuring Dependabot for automated dependency updates on GitHub. Cover version constraints, update policies, and security checks.",
      "context": {
        "codebase": true
      }
    },
    "github-gitignore-file-creation": {
      "description": "github-gitignore-file-creation",
      "prompt": "Guide the creation of a .gitignore file for a GitHub repository. Cover common language and framework-specific entries.",
      "context": {
        "codebase": true
      }
    },
    "github-secret-management": {
      "description": "github-secret-management",
      "prompt": "Assist in managing secrets securely on GitHub. Cover secret creation, usage in workflows, and access control.",
      "context": {
        "codebase": true
      }
    },
    "github-organization-administration": {
      "description": "github-organization-administration",
      "prompt": "Guide the administration of a GitHub organization. Cover member management, repository organization, and team creation.",
      "context": {
        "codebase": true
      }
    },
    "github-code-metrics-analysis": {
      "description": "github-code-metrics-analysis",
      "prompt": "Assist in analyzing code metrics and statistics on GitHub. Cover tools integration, metric interpretation, and code quality improvement.",
      "context": {
        "codebase": true
      }
    },
    "github-actions-custom-scripts": {
      "description": "github-actions-custom-scripts",
      "prompt": "Guide the use of custom scripts in GitHub Actions workflows. Cover scripting languages, environment variables, and execution contexts.",
      "context": {
        "codebase": true
      }
    },
    "github-repository-archiving": {
      "description": "github-repository-archiving",
      "prompt": "Assist in archiving a GitHub repository. Cover archiving process, visibility changes, and project documentation.",
      "context": {
        "codebase": true
      }
    },
    "github-graphql-api-usage": {
      "description": "github-graphql-api-usage",
      "prompt": "Guide the usage of the GitHub GraphQL API for advanced querying and automation. Cover authentication, query structure, and response parsing.",
      "context": {
        "codebase": true
      }
    },
    "github-pages-deployment": {
      "description": "github-pages-deployment",
      "prompt": "Assist in deploying a project website using GitHub Pages. Cover branch selection, configuration, and custom domain setup.",
      "context": {
        "codebase": true
      }
    },
    "azure-vm-deployment": {
      "description": "azure-vm-deployment",
      "prompt": "Guide the deployment of virtual machines on Azure. Cover VM configuration, image selection, and network settings.",
      "context": {
        "codebase": true
      }
    },
    "azure-app-service-deployment": {
      "description": "azure-app-service-deployment",
      "prompt": "Assist in deploying web applications to Azure App Service. Cover deployment slots, environment configuration, and scaling options.",
      "context": {
        "codebase": true
      }
    },
    "azure-cosmos-db-integration": {
      "description": "azure-cosmos-db-integration",
      "prompt": "Guide the integration of Azure Cosmos DB into applications. Cover data modeling, partitioning, and querying strategies.",
      "context": {
        "codebase": true
      }
    },
    "azure-function-development": {
      "description": "azure-function-development",
      "prompt": "Assist in developing serverless functions with Azure Functions. Cover function creation, triggers, and bindings.",
      "context": {
        "codebase": true
      }
    },
    "azure-storage-account-configuration": {
      "description": "azure-storage-account-configuration",
      "prompt": "Guide the configuration of Azure Storage accounts. Cover blob storage, table storage, and access control.",
      "context": {
        "codebase": true
      }
    },
    "azure-devops-pipeline-setup": {
      "description": "azure-devops-pipeline-setup",
      "prompt": "Assist in setting up continuous integration/continuous deployment (CI/CD) pipelines with Azure DevOps. Cover pipeline creation, triggers, and artifact management.",
      "context": {
        "codebase": true
      }
    },
    "azure-ai-services-integration": {
      "description": "azure-ai-services-integration",
      "prompt": "Guide the integration of Azure AI services into applications. Cover cognitive services, machine learning models, and natural language processing.",
      "context": {
        "codebase": true
      }
    },
    "azure-logic-app-development": {
      "description": "azure-logic-app-development",
      "prompt": "Assist in developing workflows using Azure Logic Apps. Cover trigger configuration, actions, and error handling.",
      "context": {
        "codebase": true
      }
    },
    "azure-service-bus-implementation": {
      "description": "azure-service-bus-implementation",
      "prompt": "Guide the implementation of message queues and topics with Azure Service Bus. Cover message publishing, subscription, and error handling.",
      "context": {
        "codebase": true
      }
    },
    "azure-aks-kubernetes-deployment": {
      "description": "azure-aks-kubernetes-deployment",
      "prompt": "Assist in deploying applications to Azure Kubernetes Service (AKS). Cover cluster creation, pod deployment, and scaling.",
      "context": {
        "codebase": true
      }
    },
    "azure-function-app-configuration": {
      "description": "azure-function-app-configuration",
      "prompt": "Guide the configuration of Azure Function Apps. Cover environment variables, application settings, and deployment options.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-compute-engine-deployment": {
      "description": "google-cloud-compute-engine-deployment",
      "prompt": "Assist in deploying virtual machines on Google Cloud Compute Engine. Cover machine type selection, image configuration, and network setup.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-app-engine-deployment": {
      "description": "google-cloud-app-engine-deployment",
      "prompt": "Guide the deployment of web applications to Google Cloud App Engine. Cover environment configuration, scaling options, and traffic splitting.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-spanner-database-usage": {
      "description": "google-cloud-spanner-database-usage",
      "prompt": "Assist in using Google Cloud Spanner for globally distributed databases. Cover schema design, transactions, and SQL querying.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-functions-development": {
      "description": "google-cloud-functions-development",
      "prompt": "Guide the development of serverless functions with Google Cloud Functions. Cover function creation, triggers, and environment variables.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-storage-integration": {
      "description": "google-cloud-storage-integration",
      "prompt": "Assist in integrating Google Cloud Storage into applications. Cover bucket creation, file uploads, and access control.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-build-pipeline-setup": {
      "description": "google-cloud-build-pipeline-setup",
      "prompt": "Guide the setup of CI/CD pipelines with Google Cloud Build. Cover build configuration, triggers, and artifact storage.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-ai-platform-integration": {
      "description": "google-cloud-ai-platform-integration",
      "prompt": "Assist in integrating machine learning models with Google Cloud AI Platform. Cover model deployment, prediction requests, and versioning.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-dataflow-pipeline-development": {
      "description": "google-cloud-dataflow-pipeline-development",
      "prompt": "Guide the development of data processing pipelines with Google Cloud Dataflow. Cover pipeline design, transformations, and streaming processing.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-pubsub-implementation": {
      "description": "google-cloud-pubsub-implementation",
      "prompt": "Assist in implementing publish/subscribe messaging with Google Cloud Pub/Sub. Cover topic creation, message publishing, and subscription management.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-gke-kubernetes-deployment": {
      "description": "google-cloud-gke-kubernetes-deployment",
      "prompt": "Guide the deployment of applications to Google Kubernetes Engine (GKE). Cover cluster creation, pod deployment, and scaling.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-cloud-functions-configuration": {
      "description": "google-cloud-cloud-functions-configuration",
      "prompt": "Guide the configuration of Google Cloud Cloud Functions. Cover environment variables, function triggers, and deployment options.",
      "context": {
        "codebase": true
      }
    },
    "azure-cognitive-search-integration": {
      "description": "azure-cognitive-search-integration",
      "prompt": "Assist in integrating Azure Cognitive Search into applications. Cover index creation, search queries, and result handling.",
      "context": {
        "codebase": true
      }
    },
    "azure-notification-hub-implementation": {
      "description": "azure-notification-hub-implementation",
      "prompt": "Guide the implementation of push notifications with Azure Notification Hub. Cover registration, message sending, and platform-specific configurations.",
      "context": {
        "codebase": true
      }
    },
    "azure-api-management-configuration": {
      "description": "azure-api-management-configuration",
      "prompt": "Assist in configuring Azure API Management for API governance. Cover API creation, versioning, and access policies.",
      "context": {
        "codebase": true
      }
    },
    "azure-iot-hub-device-communication": {
      "description": "azure-iot-hub-device-communication",
      "prompt": "Guide device communication using Azure IoT Hub. Cover device registration, telemetry messages, and command handling.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-natural-language-processing": {
      "description": "google-cloud-natural-language-processing",
      "prompt": "Assist in natural language processing tasks using Google Cloud Natural Language API. Cover sentiment analysis, entity recognition, and syntax analysis.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-translate-api-integration": {
      "description": "google-cloud-translate-api-integration",
      "prompt": "Guide the integration of Google Cloud Translate API for text translation. Cover language detection, translation requests, and result handling.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-bigquery-usage": {
      "description": "google-cloud-bigquery-usage",
      "prompt": "Assist in using Google Cloud BigQuery for analytics and data warehousing. Cover SQL querying, table schema design, and data visualization.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-secret-manager-configuration": {
      "description": "google-cloud-secret-manager-configuration",
      "prompt": "Guide the configuration of Google Cloud Secret Manager for secure secret storage. Cover secret creation, access control, and rotation policies.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-vertex-ai-model-deployment": {
      "description": "google-cloud-vertex-ai-model-deployment",
      "prompt": "Assist in deploying machine learning models with Google Cloud Vertex AI. Cover model versioning, deployment options, and prediction requests.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-dataprep-pipeline-development": {
      "description": "google-cloud-dataprep-pipeline-development",
      "prompt": "Guide the development of data preparation pipelines with Google Cloud Dataprep. Cover data cleaning, transformation, and enrichment.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-identity-platform-integration": {
      "description": "google-cloud-identity-platform-integration",
      "prompt": "Assist in integrating Google Cloud Identity Platform for user authentication. Cover user registration, login flows, and access control.",
      "context": {
        "codebase": true
      }
    },
    "google-cloud-memorystore-redis-usage": {
      "description": "google-cloud-memorystore-redis-usage",
      "prompt": "Guide the usage of Google Cloud Memorystore for Redis. Cover instance creation, data storage, and access control.",
      "context": {
        "codebase": true
      }
    },
    "azure-signalr-service-integration": {
      "description": "azure-signalr-service-integration",
      "prompt": "Assist in integrating Azure SignalR Service for real-time communication. Cover hub creation, connection management, and message broadcasting.",
      "context": {
        "codebase": true
      }
    },
    "azure-durable-functions-development": {
      "description": "azure-durable-functions-development",
      "prompt": "Guide the development of workflows using Azure Durable Functions. Cover orchestrator functions, activity functions, and stateful workflows.",
      "context": {
        "codebase": true
      }
    },
    "azure-container-instances-deployment": {
      "description": "azure-container-instances-deployment",
      "prompt": "Assist in deploying applications to Azure Container Instances. Cover container image selection, instance creation, and scaling options.",
      "context": {
        "codebase": true
      }
    },
    "azure-front-door-configuration": {
      "description": "azure-front-door-configuration",
      "prompt": "Guide the configuration of Azure Front Door for global load balancing and security. Cover routing rules, backend pools, and caching settings.",
      "context": {
        "codebase": true
      }
    },
    "azure-logic-app-custom-connector-development": {
      "description": "azure-logic-app-custom-connector-development",
      "prompt": "Assist in developing custom connectors for Azure Logic Apps. Cover authentication methods, action triggers, and connector testing.",
      "context": {
        "codebase": true
      }
    },
    "azure-app-gateway-configuration": {
      "description": "azure-app-gateway-configuration",
      "prompt": "Guide the configuration of Azure Application Gateway for web application delivery. Cover routing rules, SSL termination, and WAF settings.",
      "context": {
        "codebase": true
      }
    },
    "web-app-architecture-design": {
      "description": "web-app-architecture-design",
      "prompt": "Guide the design of the architecture for a web application. Cover front-end, back-end, database, and communication patterns.",
      "context": {
        "codebase": true
      }
    },
    "responsive-design-optimization": {
      "description": "responsive-design-optimization",
      "prompt": "Assist in optimizing a web application for responsive design. Cover media queries, flexible grids, and image optimization.",
      "context": {
        "codebase": true
      }
    },
    "web-app-security-review": {
      "description": "web-app-security-review",
      "prompt": "Conduct a security review of a web application. Cover authentication mechanisms, data encryption, and vulnerability scanning.",
      "context": {
        "codebase": true
      }
    },
    "restful-api-design-guidelines": {
      "description": "restful-api-design-guidelines",
      "prompt": "Provide guidelines for designing RESTful APIs. Cover resource naming, HTTP methods, and error handling.",
      "context": {
        "codebase": true
      }
    },
    "graphql-api-implementation": {
      "description": "graphql-api-implementation",
      "prompt": "Guide the implementation of a GraphQL API. Cover schema definition, queries, mutations, and resolvers.",
      "context": {
        "codebase": true
      }
    },
    "web-app-user-authentication-flow": {
      "description": "web-app-user-authentication-flow",
      "prompt": "Guide the implementation of a user authentication flow in a web application. Cover registration, login, and password reset.",
      "context": {
        "codebase": true
      }
    },
    "single-page-application-development": {
      "description": "single-page-application-development",
      "prompt": "Assist in developing a single-page application (SPA). Cover client-side routing, state management, and API integration.",
      "context": {
        "codebase": true
      }
    },
    "web-app-internationalization": {
      "description": "web-app-internationalization",
      "prompt": "Guide the internationalization (i18n) of a web application. Cover language detection, translation integration, and locale management.",
      "context": {
        "codebase": true
      }
    },
    "web-app-accessibility-improvement": {
      "description": "web-app-accessibility-improvement",
      "prompt": "Assist in improving accessibility in a web application. Cover ARIA roles, keyboard navigation, and screen reader compatibility.",
      "context": {
        "codebase": true
      }
    },
    "web-app-performance-optimization": {
      "description": "web-app-performance-optimization",
      "prompt": "Guide the optimization of a web application for performance. Cover code splitting, lazy loading, and image compression.",
      "context": {
        "codebase": true
      }
    },
    "add-logging-to-function": {
      "description": "add-logging-to-function",
      "prompt": "Using the context code, add appropriate logging statements to enhance function traceability and debugging.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "optimize-database-query": {
      "description": "optimize-database-query",
      "prompt": "Analyze the context code and optimize a specific database query for better performance without compromising functionality.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-authentication-middleware": {
      "description": "implement-authentication-middleware",
      "prompt": "Utilize the context code to implement middleware for user authentication, ensuring secure access to protected routes.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "refactor-code-to-use-design-pattern": {
      "description": "refactor-code-to-use-design-pattern",
      "prompt": "Refactor the selected code portion to adhere to a specific design pattern (e.g., Singleton, Observer, Factory) for improved maintainability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "integrate-third-party-library": {
      "description": "integrate-third-party-library",
      "prompt": "Based on the context code, integrate a specified third-party library to enhance functionality. Provide necessary configuration if applicable.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-code-style-formatting": {
      "description": "apply-code-style-formatting",
      "prompt": "Using the context code, apply consistent code style formatting according to established guidelines, improving readability and maintainability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-caching-strategy": {
      "description": "implement-caching-strategy",
      "prompt": "Analyze the context code and implement an appropriate caching strategy to enhance performance and reduce redundant computations.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "fix-security-vulnerability": {
      "description": "fix-security-vulnerability",
      "prompt": "Identify and address a specific security vulnerability within the selected code, implementing necessary safeguards.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "add-unit-tests-to-function": {
      "description": "add-unit-tests-to-function",
      "prompt": "Based on the context code, add unit tests to a specific function, ensuring comprehensive test coverage for reliable code.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-code-splitting": {
      "description": "apply-code-splitting",
      "prompt": "Analyze the context code and apply code splitting techniques to improve loading times, especially in web applications.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-feature-toggle": {
      "description": "implement-feature-toggle",
      "prompt": "Utilize the context code to implement a feature toggle mechanism, allowing for easy feature activation/deactivation.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "update-dependency-versions": {
      "description": "update-dependency-versions",
      "prompt": "Review the context code and update outdated dependencies to their latest versions, ensuring compatibility and security.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-async-await-pattern": {
      "description": "apply-async-await-pattern",
      "prompt": "Refactor the selected code to utilize the async/await pattern for asynchronous operations, improving code readability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-error-handling-strategy": {
      "description": "implement-error-handling-strategy",
      "prompt": "Based on the context code, implement a robust error handling strategy for better resilience and user experience.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "add-comments-documentation": {
      "description": "add-comments-documentation",
      "prompt": "Enhance the context code by adding comprehensive comments and documentation to improve code understanding and maintainability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-microservices-communication": {
      "description": "implement-microservices-communication",
      "prompt": "Utilize the context code to implement or optimize communication between microservices, ensuring efficient data exchange.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-graphql-schema-design": {
      "description": "apply-graphql-schema-design",
      "prompt": "Refactor or create GraphQL schemas in the selected code, adhering to best practices for effective data querying and mutation.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-authorization-middleware": {
      "description": "implement-authorization-middleware",
      "prompt": "Based on the context code, implement middleware for user authorization, ensuring secure access to specific resources.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-code-review-feedback": {
      "description": "apply-code-review-feedback",
      "prompt": "Address specific feedback from a code review by making necessary changes or improvements to the selected code.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-websockets-communication": {
      "description": "implement-websockets-communication",
      "prompt": "Utilize the context code to implement or optimize communication using Websockets, enabling real-time interactions.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "optimize-image-loading": {
      "description": "optimize-image-loading",
      "prompt": "Analyze the context code and optimize the loading of images, considering lazy loading, responsive images, and image compression.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-oauth-authentication": {
      "description": "implement-oauth-authentication",
      "prompt": "Utilize the context code to implement OAuth authentication, enabling secure and standardized user authentication.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-ci-cd-pipeline-setup": {
      "description": "apply-ci-cd-pipeline-setup",
      "prompt": "Based on the context code, set up a CI/CD pipeline to automate the build, test, and deployment processes.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-cors-configuration": {
      "description": "implement-cors-configuration",
      "prompt": "Utilize the context code to configure Cross-Origin Resource Sharing (CORS) for secure communication between web applications.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-mvc-architecture": {
      "description": "apply-mvc-architecture",
      "prompt": "Refactor the selected code to adhere to the Model-View-Controller (MVC) architecture for better code organization and separation of concerns.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-rate-limiting-strategy": {
      "description": "implement-rate-limiting-strategy",
      "prompt": "Based on the context code, implement a rate limiting strategy to prevent abuse and ensure fair usage of resources.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "add-environment-variable-configuration": {
      "description": "add-environment-variable-configuration",
      "prompt": "Enhance the context code by adding proper configuration using environment variables for improved flexibility and security.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-memoization-technique": {
      "description": "apply-memoization-technique",
      "prompt": "Analyze the context code and apply memoization techniques to optimize computationally expensive function calls.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-ssl-tls-encryption": {
      "description": "implement-ssl-tls-encryption",
      "prompt": "Utilize the context code to implement SSL/TLS encryption for secure communication between clients and servers.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-pagination-to-data-fetching": {
      "description": "apply-pagination-to-data-fetching",
      "prompt": "Refactor the selected code to implement pagination when fetching data, enhancing performance and user experience.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-serverless-function": {
      "description": "implement-serverless-function",
      "prompt": "Utilize the context code to implement a serverless function, taking advantage of serverless computing for specific tasks.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "add-code-comments-for-clarity": {
      "description": "add-code-comments-for-clarity",
      "prompt": "Enhance the context code by adding comments to clarify complex logic or provide context for future developers.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-redis-caching-strategy": {
      "description": "apply-redis-caching-strategy",
      "prompt": "Analyze the context code and implement Redis caching to optimize data retrieval and improve overall application performance.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-state-management-pattern": {
      "description": "implement-state-management-pattern",
      "prompt": "Refactor the selected code to implement a state management pattern (e.g., Redux, Vuex) for better handling of application state.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "optimize-css-for-performance": {
      "description": "optimize-css-for-performance",
      "prompt": "Analyze the context code and optimize CSS for better performance, considering minification, bundling, and critical path rendering.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-webhooks-for-event-handling": {
      "description": "implement-webhooks-for-event-handling",
      "prompt": "Utilize the context code to implement webhooks for handling asynchronous events, enabling real-time updates and integrations.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-optimize-query-performance": {
      "description": "sql-optimize-query-performance",
      "prompt": "Analyze the context SQL query and optimize it for better performance, considering indexes, query structure, and execution plan.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-add-foreign-key-constraint": {
      "description": "sql-add-foreign-key-constraint",
      "prompt": "Utilize the context SQL code to add a foreign key constraint between specified tables, ensuring data integrity.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-stored-procedure": {
      "description": "sql-implement-stored-procedure",
      "prompt": "Based on the context SQL code, implement a stored procedure to encapsulate a specific set of database operations for reuse and security.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-refactor-database-schema": {
      "description": "sql-refactor-database-schema",
      "prompt": "Refactor the selected SQL database schema to enhance organization, normalization, and overall database structure.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-view": {
      "description": "sql-create-database-view",
      "prompt": "Utilize the context SQL code to create a database view that presents data in a specific way, improving query simplicity and reusability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-optimize-indexing-strategy": {
      "description": "sql-optimize-indexing-strategy",
      "prompt": "Analyze the context SQL code and optimize the indexing strategy to improve query performance and minimize resource usage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-triggers": {
      "description": "sql-implement-database-triggers",
      "prompt": "Utilize the context SQL code to implement database triggers for automated response to specific events, ensuring data consistency.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-migrate-data-between-tables": {
      "description": "sql-migrate-data-between-tables",
      "prompt": "Based on the context SQL code, migrate data between specified tables, considering data transformation and integrity.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-full-text-search": {
      "description": "sql-implement-full-text-search",
      "prompt": "Utilize the context SQL code to implement full-text search functionality, enabling more comprehensive and efficient text-based queries.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-refactor-query-for-readability": {
      "description": "sql-refactor-query-for-readability",
      "prompt": "Refactor the selected SQL query for improved readability, applying formatting and structuring changes.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-index-partitioning": {
      "description": "sql-implement-database-index-partitioning",
      "prompt": "Utilize the context SQL code to implement index partitioning for large tables, enhancing query performance and maintenance.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-function": {
      "description": "sql-create-database-function",
      "prompt": "Based on the context SQL code, create a database function to encapsulate a specific computation or transformation for reuse.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-optimize-database-joins": {
      "description": "sql-optimize-database-joins",
      "prompt": "Analyze the context SQL code and optimize database joins for improved query performance, considering index usage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-transaction-management": {
      "description": "sql-implement-transaction-management",
      "prompt": "Utilize the context SQL code to implement transaction management for ensuring data consistency and integrity in multi-statement operations.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-index": {
      "description": "sql-create-database-index",
      "prompt": "Create a new database index in the context SQL code to improve query performance based on specific query patterns.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-migrate-database-to-new-schema": {
      "description": "sql-migrate-database-to-new-schema",
      "prompt": "Utilize the context SQL code to migrate the database to a new schema, considering data transformation and schema evolution.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-views-for-reporting": {
      "description": "sql-implement-views-for-reporting",
      "prompt": "Based on the context SQL code, implement database views specifically designed for reporting purposes, aggregating and presenting data.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-trigger": {
      "description": "sql-create-database-trigger",
      "prompt": "Create a new database trigger in the context SQL code to automatically respond to specific data changes or events.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-security-measures": {
      "description": "sql-implement-database-security-measures",
      "prompt": "Utilize the context SQL code to implement security measures such as role-based access control (RBAC) and encryption for the database.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-backup-strategy": {
      "description": "sql-implement-database-backup-strategy",
      "prompt": "Based on the context SQL code, implement a robust database backup strategy to ensure data recovery and integrity.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-refactor-database-indexes": {
      "description": "sql-refactor-database-indexes",
      "prompt": "Refactor the selected SQL code to optimize existing database indexes for better query performance and resource usage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-partitioning": {
      "description": "sql-implement-database-partitioning",
      "prompt": "Utilize the context SQL code to implement database partitioning for improved data management and query performance.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-materialized-view": {
      "description": "sql-create-database-materialized-view",
      "prompt": "Create a new materialized view in the context SQL code to store and efficiently query precomputed aggregates or joins.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-auditing": {
      "description": "sql-implement-database-auditing",
      "prompt": "Based on the context SQL code, implement auditing mechanisms for tracking and recording database changes and access.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-refactor-database-relationships": {
      "description": "sql-refactor-database-relationships",
      "prompt": "Refactor the selected SQL code to optimize database relationships, ensuring proper normalization and efficient query execution.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-materialized-index": {
      "description": "sql-create-database-materialized-index",
      "prompt": "Create a new materialized index in the context SQL code to optimize specific queries by precomputing and storing index data.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-replication": {
      "description": "sql-implement-database-replication",
      "prompt": "Utilize the context SQL code to implement database replication for achieving high availability and data redundancy.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-snapshot": {
      "description": "sql-create-database-snapshot",
      "prompt": "Create a new database snapshot in the context SQL code to capture the state of the database at a specific point in time.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-refactor-database-query-joins": {
      "description": "sql-refactor-database-query-joins",
      "prompt": "Refactor the selected SQL code to optimize and clarify database query joins, improving readability and performance.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-transaction-log": {
      "description": "sql-create-database-transaction-log",
      "prompt": "Create a new transaction log in the context SQL code to record and track changes made to the database for recovery purposes.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-sharding": {
      "description": "sql-implement-database-sharding",
      "prompt": "Utilize the context SQL code to implement database sharding for horizontal partitioning of data, enhancing scalability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-data-masking": {
      "description": "sql-create-database-data-masking",
      "prompt": "Create data masking mechanisms in the context SQL code to protect sensitive information from unauthorized access.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-change-tracking": {
      "description": "sql-implement-database-change-tracking",
      "prompt": "Utilize the context SQL code to implement change tracking mechanisms for monitoring and auditing database modifications.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-create-database-query-optimization-plan": {
      "description": "sql-create-database-query-optimization-plan",
      "prompt": "Create a comprehensive plan in the context SQL code for ongoing query optimization, considering usage patterns and performance metrics.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "sql-implement-database-data-archiving": {
      "description": "sql-implement-database-data-archiving",
      "prompt": "Utilize the context SQL code to implement data archiving strategies for efficient long-term storage and retrieval.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "extract-method": {
      "description": "extract-method",
      "prompt": "Extract a selected code block into a separate method or function, improving code modularity and readability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "optimize-import-statements": {
      "description": "optimize-import-statements",
      "prompt": "Optimize and organize import statements in the current file, removing unused imports and arranging them alphabetically.",
      "context": {
        "currentFile": true
      }
    },
    "create-unit-test-skeleton": {
      "description": "create-unit-test-skeleton",
      "prompt": "Generate a skeleton for unit tests for the currently selected function or method, ensuring comprehensive test coverage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "check-variable-naming-conventions": {
      "description": "check-variable-naming-conventions",
      "prompt": "Check and provide feedback on variable naming conventions in the current file, ensuring adherence to best practices.",
      "context": {
        "currentFile": true
      }
    },
    "generate-random-test-data": {
      "description": "generate-random-test-data",
      "prompt": "Generate random test data based on the structure of the currently selected data model or class, facilitating testing.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-code-review-suggestions": {
      "description": "apply-code-review-suggestions",
      "prompt": "Apply suggestions from a code review tool or checklist to the currently open files, addressing feedback and improving code quality.",
      "context": {
        "openTabs": true
      }
    },
    "run-code-coverage-analysis": {
      "description": "run-code-coverage-analysis",
      "prompt": "Run code coverage analysis on the current test suite, providing insights into which parts of the code are covered by tests.",
      "context": {
        "currentFile": true
      }
    },
    "implement-design-pattern": {
      "description": "implement-design-pattern",
      "prompt": "Implement a selected design pattern in the current codebase, promoting maintainability and scalability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "analyze-runtime-complexity": {
      "description": "analyze-runtime-complexity",
      "prompt": "Analyze the runtime complexity of the currently selected algorithm or function, providing insights into efficiency.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-custom-exception-handling": {
      "description": "implement-custom-exception-handling",
      "prompt": "Implement custom exception handling logic in the current file, ensuring robust error management.",
      "context": {
        "currentFile": true
      }
    },
    "evaluate-dependency-vulnerabilities": {
      "description": "evaluate-dependency-vulnerabilities",
      "prompt": "Evaluate and list potential vulnerabilities in the dependencies of the current project, prioritizing security.",
      "context": {
        "currentDir": true
      }
    },
    "generate-api-documentation": {
      "description": "generate-api-documentation",
      "prompt": "Generate API documentation for the current project based on the available routes and endpoints, promoting clarity and understanding.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-singleton-pattern": {
      "description": "implement-singleton-pattern",
      "prompt": "Implement the Singleton design pattern in the current codebase, ensuring a single instance of a class is created.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "analyze-algorithmic-complexity": {
      "description": "analyze-algorithmic-complexity",
      "prompt": "Analyze the algorithmic complexity of the currently selected algorithm, providing insights into its efficiency and scalability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-refactoring-suggestions": {
      "description": "apply-refactoring-suggestions",
      "prompt": "Apply automated refactoring suggestions to the currently open files, improving code structure and maintainability.",
      "context": {
        "openTabs": true
      }
    },
    "implement-factory-method-pattern": {
      "description": "implement-factory-method-pattern",
      "prompt": "Implement the Factory Method design pattern in the current codebase, providing an interface for object creation.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "evaluate-code-quality-metrics": {
      "description": "evaluate-code-quality-metrics",
      "prompt": "Evaluate and display code quality metrics for the current project, highlighting areas for improvement.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-observer-pattern": {
      "description": "implement-observer-pattern",
      "prompt": "Implement the Observer design pattern in the current codebase, facilitating a one-to-many dependency between objects.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "analyze-memory-usage": {
      "description": "analyze-memory-usage",
      "prompt": "Analyze and report memory usage patterns in the current codebase, identifying areas for optimization and efficiency.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-prototype-pattern": {
      "description": "implement-prototype-pattern",
      "prompt": "Implement the Prototype design pattern in the current codebase, allowing object creation through cloning.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "evaluate-code-duplication": {
      "description": "evaluate-code-duplication",
      "prompt": "Evaluate and identify code duplication in the current project, suggesting areas for consolidation and improvement.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-command-pattern": {
      "description": "implement-command-pattern",
      "prompt": "Implement the Command design pattern in the current codebase, encapsulating a request as an object.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "analyze-network-request-performance": {
      "description": "analyze-network-request-performance",
      "prompt": "Analyze and report the performance of network requests in the current codebase, identifying areas for optimization.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-state-pattern": {
      "description": "implement-state-pattern",
      "prompt": "Implement the State design pattern in the current codebase, allowing an object to alter its behavior when its internal state changes.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-code-formatting": {
      "description": "apply-code-formatting",
      "prompt": "Apply consistent code formatting to the currently open files, adhering to established coding standards.",
      "context": {
        "openTabs": true
      }
    },
    "optimize-database-indexing": {
      "description": "optimize-database-indexing",
      "prompt": "Optimize the indexing strategy for the current database schema, improving query performance and resource usage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-strategy-pattern": {
      "description": "implement-strategy-pattern",
      "prompt": "Implement the Strategy design pattern in the current codebase, defining a family of algorithms, encapsulating each one, and making them interchangeable.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "evaluate-code-cyclomatic-complexity": {
      "description": "evaluate-code-cyclomatic-complexity",
      "prompt": "Evaluate and report code cyclomatic complexity in the current project, identifying areas for simplification and improvement.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-template-method-pattern": {
      "description": "implement-template-method-pattern",
      "prompt": "Implement the Template Method design pattern in the current codebase, defining the skeleton of an algorithm in the superclass but letting subclasses override specific steps.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "analyze-security-vulnerabilities": {
      "description": "analyze-security-vulnerabilities",
      "prompt": "Analyze and report security vulnerabilities in the current project, prioritizing and addressing potential risks.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-visitor-pattern": {
      "description": "implement-visitor-pattern",
      "prompt": "Implement the Visitor design pattern in the current codebase, defining a new operation without changing the classes of the elements on which it operates.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "evaluate-code-testability": {
      "description": "evaluate-code-testability",
      "prompt": "Evaluate and provide feedback on code testability in the current project, suggesting improvements for better test coverage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "install-missing-python-packages": {
      "description": "install-missing-python-packages",
      "prompt": "Scan the current codebase and install any missing Python packages specified in import statements.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "analyze-python-code-style": {
      "description": "analyze-python-code-style",
      "prompt": "Analyze the Python code style in the current file, providing feedback on adherence to PEP 8 and suggesting improvements.",
      "context": {
        "currentFile": true
      }
    },
    "create-virtual-environment": {
      "description": "create-virtual-environment",
      "prompt": "Create a virtual environment for the current project, isolating dependencies and ensuring version compatibility.",
      "context": {
        "currentDir": true
      }
    },
    "generate-python-docstrings": {
      "description": "generate-python-docstrings",
      "prompt": "Generate docstrings for functions and classes in the current Python file, enhancing code documentation.",
      "context": {
        "currentFile": true
      }
    },
    "optimize-python-imports": {
      "description": "optimize-python-imports",
      "prompt": "Optimize and organize import statements in the current Python file, removing unused imports and arranging them alphabetically.",
      "context": {
        "currentFile": true
      }
    },
    "run-python-tests": {
      "description": "run-python-tests",
      "prompt": "Run all Python tests in the current project, providing test results and identifying any failures or errors.",
      "context": {
        "codebase": true
      }
    },
    "check-python-type-hints": {
      "description": "check-python-type-hints",
      "prompt": "Check and validate type hints in the current Python file, ensuring compatibility and correctness.",
      "context": {
        "currentFile": true
      }
    },
    "lint-python-code": {
      "description": "lint-python-code",
      "prompt": "Lint the current Python file using a specified linter, providing feedback on potential issues and adherence to coding standards.",
      "context": {
        "currentFile": true
      }
    },
    "profile-python-code": {
      "description": "profile-python-code",
      "prompt": "Profile the current Python code, identifying performance bottlenecks and areas for optimization.",
      "context": {
        "currentFile": true
      }
    },
    "update-python-dependencies": {
      "description": "update-python-dependencies",
      "prompt": "Update all Python dependencies in the current project to their latest compatible versions, ensuring security and feature updates.",
      "context": {
        "codebase": true
      }
    },
    "generate-python-test-skeleton": {
      "description": "generate-python-test-skeleton",
      "prompt": "Generate a skeleton for Python unit tests for the currently selected function or class, ensuring comprehensive test coverage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "check-python-coding-standards": {
      "description": "check-python-coding-standards",
      "prompt": "Check and provide feedback on Python coding standards in the current file, ensuring adherence to best practices.",
      "context": {
        "currentFile": true
      }
    },
    "evaluate-python-code-complexity": {
      "description": "evaluate-python-code-complexity",
      "prompt": "Evaluate and report code complexity metrics for the current Python project, identifying areas for simplification and improvement.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "document-python-module-dependencies": {
      "description": "document-python-module-dependencies",
      "prompt": "Document and display the dependencies between Python modules in the current project, providing a visual representation.",
      "context": {
        "codebase": true
      }
    },
    "debug-python-code": {
      "description": "debug-python-code",
      "prompt": "Debug the current Python code using a specified debugger, helping identify and fix issues in the code.",
      "context": {
        "currentFile": true
      }
    },
    "analyze-python-package-vulnerabilities": {
      "description": "analyze-python-package-vulnerabilities",
      "prompt": "Analyze and list potential security vulnerabilities in the Python packages used by the current project.",
      "context": {
        "codebase": true
      }
    },
    "generate-python-api-documentation": {
      "description": "generate-python-api-documentation",
      "prompt": "Generate API documentation for Python functions and classes in the current project, promoting clarity and understanding.",
      "context": {
        "codebase": true
      }
    },
    "implement-python-design-pattern": {
      "description": "implement-python-design-pattern",
      "prompt": "Implement a selected design pattern in the current Python codebase, promoting maintainability and scalability.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "evaluate-python-test-coverage": {
      "description": "evaluate-python-test-coverage",
      "prompt": "Evaluate and report test coverage for Python code in the current project, identifying areas with insufficient testing.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "apply-python-refactoring-suggestions": {
      "description": "apply-python-refactoring-suggestions",
      "prompt": "Apply automated refactoring suggestions to the currently open Python files, improving code structure and maintainability.",
      "context": {
        "openTabs": true
      }
    },
    "optimize-python-memory-usage": {
      "description": "optimize-python-memory-usage",
      "prompt": "Optimize memory usage in the current Python codebase, identifying and addressing areas of high memory consumption.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-python-exception-handling": {
      "description": "implement-python-exception-handling",
      "prompt": "Implement custom exception handling logic in the current Python file, ensuring robust error management.",
      "context": {
        "currentFile": true
      }
    },
    "evaluate-python-dependency-licenses": {
      "description": "evaluate-python-dependency-licenses",
      "prompt": "Evaluate and report the licenses of dependencies used in the current Python project, ensuring compliance.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "generate-python-random-test-data": {
      "description": "generate-python-random-test-data",
      "prompt": "Generate random test data based on the structure of the currently selected data model or class in Python, facilitating testing.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "check-python-syntax-errors": {
      "description": "check-python-syntax-errors",
      "prompt": "Check and identify syntax errors in the current Python file, providing feedback for quick resolution.",
      "context": {
        "currentFile": true
      }
    },
    "evaluate-python-code-duplication": {
      "description": "evaluate-python-code-duplication",
      "prompt": "Evaluate and identify code duplication in the current Python project, suggesting areas for consolidation and improvement.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-python-singleton-pattern": {
      "description": "implement-python-singleton-pattern",
      "prompt": "Implement the Singleton design pattern in the current Python codebase, ensuring a single instance of a class is created.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "evaluate-python-api-security": {
      "description": "evaluate-python-api-security",
      "prompt": "Evaluate and report security vulnerabilities in the API endpoints of the current Python project, prioritizing and addressing potential risks.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-python-factory-method-pattern": {
      "description": "implement-python-factory-method-pattern",
      "prompt": "Implement the Factory Method design pattern in the current Python codebase, providing an interface for object creation.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "evaluate-python-code-testability": {
      "description": "evaluate-python-code-testability",
      "prompt": "Evaluate and provide feedback on code testability in the current Python project, suggesting improvements for better test coverage.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "analyze-python-network-request-performance": {
      "description": "analyze-python-network-request-performance",
      "prompt": "Analyze and report the performance of network requests in the current Python project, identifying areas for optimization.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
    "implement-python-state-pattern": {
      "description": "implement-python-state-pattern",
      "prompt": "Implement the State design pattern in the current Python codebase, allowing an object to alter its behavior when its internal state changes.",
      "context": {
        "codebase": true,
        "selection": true
      }
    },
      "detect-duplicates": {
        "description": "detect-duplicates",
        "prompt": "Identify and explain the logic behind the code's duplicate detection mechanism.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "time-complexity-analysis": {
        "description": "time-complexity-analysis",
        "prompt": "Analyze the time complexity of the key algorithms implemented in the codebase.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "architecture-design-review": {
        "description": "architecture-design-review",
        "prompt": "Review the overall architecture design of the system, highlighting its strengths and potential improvements.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "memory-management-strategy": {
        "description": "memory-management-strategy",
        "prompt": "Describe the memory management strategy employed in the code, emphasizing its efficiency and reliability.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "thread-safety-evaluation": {
        "description": "thread-safety-evaluation",
        "prompt": "Evaluate the thread safety measures implemented in the codebase, assessing their effectiveness in preventing race conditions.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "optimization-potential-analysis": {
        "description": "optimization-potential-analysis",
        "prompt": "Identify areas in the code with potential for optimization, suggesting specific improvements to enhance performance.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "dependency-analysis": {
        "description": "dependency-analysis",
        "prompt": "Conduct a thorough analysis of the code's dependencies, identifying their impact on overall system stability and maintainability.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-vulnerability-assessment": {
        "description": "security-vulnerability-assessment",
        "prompt": "Perform a comprehensive assessment of potential security vulnerabilities present in the codebase, proposing mitigation strategies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-documentation-evaluation": {
        "description": "code-documentation-evaluation",
        "prompt": "Evaluate the quality and completeness of the code documentation, suggesting improvements to enhance readability and understanding.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "input-validation-review": {
        "description": "input-validation-review",
        "prompt": "Review the input validation mechanisms in the code, ensuring robustness against malicious inputs and data integrity issues.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "performance-profiling-analysis": {
        "description": "performance-profiling-analysis",
        "prompt": "Conduct performance profiling of critical code segments, identifying bottlenecks and proposing optimizations for enhanced efficiency.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "database-schema-review": {
        "description": "database-schema-review",
        "prompt": "Review the database schema design, ensuring it aligns with performance, scalability, and data integrity requirements.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "logging-strategy-evaluation": {
        "description": "logging-strategy-evaluation",
        "prompt": "Evaluate the logging strategy implemented in the code, ensuring it provides sufficient visibility into system behavior and errors.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "user-experience-assessment": {
        "description": "user-experience-assessment",
        "prompt": "Assess the user experience provided by the application, identifying areas for improvement in usability and accessibility.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "version-control-best-practices-review": {
        "description": "version-control-best-practices-review",
        "prompt": "Review version control practices within the project, ensuring adherence to best practices for collaboration, traceability, and code integrity.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-review-guidelines-assessment": {
        "description": "code-review-guidelines-assessment",
        "prompt": "Assess the effectiveness of the code review guidelines in place, recommending adjustments to improve code quality and team collaboration.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "error-handling-strategy-review": {
        "description": "error-handling-strategy-review",
        "prompt": "Review the error handling strategy employed in the code, ensuring it gracefully handles exceptions and provides meaningful feedback to users.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "test-coverage-analysis": {
        "description": "test-coverage-analysis",
        "prompt": "Analyze the test coverage of the codebase, identifying areas with inadequate testing and proposing strategies for improvement.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "containerization-strategy-evaluation": {
        "description": "containerization-strategy-evaluation",
        "prompt": "Evaluate the containerization strategy used for deployment, assessing its compatibility with scalability, reliability, and resource efficiency goals.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-encryption-assessment": {
        "description": "data-encryption-assessment",
        "prompt": "Assess the data encryption mechanisms employed in the application, ensuring sensitive information is adequately protected against unauthorized access.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "api-design-review": {
        "description": "api-design-review",
        "prompt": "Review the design of exposed APIs, ensuring they adhere to RESTful principles, are intuitive to use, and provide sufficient documentation.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "concurrency-control-evaluation": {
        "description": "concurrency-control-evaluation",
        "prompt": "Evaluate the concurrency control mechanisms implemented in the codebase, ensuring data consistency and avoiding deadlock situations.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-maintainability-analysis": {
        "description": "code-maintainability-analysis",
        "prompt": "Analyze the codebase for maintainability, identifying areas prone to technical debt, and suggesting refactoring or documentation improvements.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-organization-assessment": {
        "description": "code-organization-assessment",
        "prompt": "Assess the organization of code modules and classes, ensuring a clear and logical structure that facilitates readability and maintenance.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "third-party-library-evaluation": {
        "description": "third-party-library-evaluation",
        "prompt": "Evaluate the suitability and reliability of third-party libraries used in the project, considering factors like community support, security, and compatibility.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "deployment-automation-review": {
        "description": "deployment-automation-review",
        "prompt": "Review the automation scripts for deployment processes, ensuring they are robust, error-resistant, and easily maintainable.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "api-security-assessment": {
        "description": "api-security-assessment",
        "prompt": "Perform a comprehensive security assessment of exposed APIs, identifying potential vulnerabilities and recommending security measures.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-style-compliance-check": {
        "description": "code-style-compliance-check",
        "prompt": "Check the codebase for adherence to coding style guidelines, ensuring consistency in formatting, naming conventions, and code structure.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "continuous-integration-setup-evaluation": {
        "description": "continuous-integration-setup-evaluation",
        "prompt": "Evaluate the configuration of continuous integration pipelines, ensuring they provide efficient feedback on code changes and facilitate automated testing.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "documentation-generation-assessment": {
        "description": "documentation-generation-assessment",
        "prompt": "Assess the effectiveness of tools used for automatic documentation generation, ensuring they capture essential information and maintain consistency.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "resource-utilization-analysis": {
        "description": "resource-utilization-analysis",
        "prompt": "Analyze resource utilization patterns of the application, identifying opportunities for optimization in CPU, memory, and network usage.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "internationalization-support-evaluation": {
        "description": "internationalization-support-evaluation",
        "prompt": "Evaluate the internationalization support in the application, ensuring it facilitates localization and adaptation to different languages and cultural norms.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-review-efficiency-analysis": {
        "description": "code-review-efficiency-analysis",
        "prompt": "Analyze the efficiency of code review processes, identifying bottlenecks and suggesting improvements to streamline the review workflow.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "serverless-architecture-assessment": {
        "description": "serverless-architecture-assessment",
        "prompt": "Assess the suitability of serverless architecture for the application, considering factors like scalability, cost-effectiveness, and operational complexity.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "machine-learning-model-evaluation": {
        "description": "machine-learning-model-evaluation",
        "prompt": "Evaluate the performance and accuracy of machine learning models integrated into the application, suggesting enhancements or alternative approaches.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-migration-strategy-review": {
        "description": "code-migration-strategy-review",
        "prompt": "Review the strategy for migrating code between environments or platforms, ensuring it minimizes downtime and data loss while maintaining consistency.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "deployment-scalability-assessment": {
        "description": "deployment-scalability-assessment",
        "prompt": "Assess the scalability of deployment infrastructure, ensuring it can accommodate growing user demands without compromising performance or reliability.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "server-security-configuration-review": {
        "description": "server-security-configuration-review",
        "prompt": "Review the server security configuration, including settings related to firewall, encryption, access control, and intrusion detection.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-privacy-compliance-check": {
        "description": "data-privacy-compliance-check",
        "prompt": "Check compliance with data privacy regulations and standards, ensuring appropriate measures are in place for data handling, storage, and access.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-review-feedback-analysis": {
        "description": "code-review-feedback-analysis",
        "prompt": "Analyze the effectiveness of code review feedback provided to developers, identifying patterns and areas for improvement in communication and constructive criticism.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "disaster-recovery-plan-review": {
        "description": "disaster-recovery-plan-review",
        "prompt": "Review the disaster recovery plan for the application, ensuring it includes procedures for data backup, restoration, and continuity of operations in case of emergencies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-modularity-evaluation": {
        "description": "code-modularity-evaluation",
        "prompt": "Evaluate the modularity of the codebase, assessing the degree to which components are encapsulated, reusable, and independent of each other.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "continuous-monitoring-strategy-assessment": {
        "description": "continuous-monitoring-strategy-assessment",
        "prompt": "Assess the strategy for continuous monitoring of application performance, security, and availability, ensuring timely detection and response to anomalies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "api-performance-optimization": {
        "description": "api-performance-optimization",
        "prompt": "Optimize the performance of exposed APIs, considering factors such as response time, throughput, and resource utilization.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-migration-strategy-review": {
        "description": "data-migration-strategy-review",
        "prompt": "Review the strategy for migrating data between different systems or databases, ensuring integrity and minimizing downtime.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "accessibility-evaluation": {
        "description": "accessibility-evaluation",
        "prompt": "Evaluate the accessibility of the user interface, ensuring compliance with accessibility standards and improving usability for all users.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-service-provider-comparison": {
        "description": "cloud-service-provider-comparison",
        "prompt": "Compare different cloud service providers for hosting the application, considering factors like cost, performance, security, and scalability.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "dependency-vulnerability-scan": {
        "description": "dependency-vulnerability-scan",
        "prompt": "Perform a vulnerability scan of third-party dependencies used in the project, identifying and addressing security risks.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "documentation-consistency-check": {
        "description": "documentation-consistency-check",
        "prompt": "Check the consistency of documentation across different modules or repositories, ensuring uniformity in style, terminology, and content.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "container-orchestration-strategy-evaluation": {
        "description": "container-orchestration-strategy-evaluation",
        "prompt": "Evaluate the strategy for container orchestration (e.g., Kubernetes), ensuring efficient management of containerized applications.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "scalability-testing": {
        "description": "scalability-testing",
        "prompt": "Perform scalability testing to assess the application's ability to handle increased load and user concurrency.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "machine-learning-model-deployment-review": {
        "description": "machine-learning-model-deployment-review",
        "prompt": "Review the deployment strategy for machine learning models, ensuring reliability, scalability, and efficient utilization of resources.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "distributed-systems-architecture-review": {
        "description": "distributed-systems-architecture-review",
        "prompt": "Review the architecture of distributed systems components, ensuring fault tolerance, data consistency, and effective communication.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-audit-log-analysis": {
        "description": "security-audit-log-analysis",
        "prompt": "Analyze security audit logs for suspicious activities, unauthorized access attempts, or potential security breaches.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "mock-data-generation-strategy-review": {
        "description": "mock-data-generation-strategy-review",
        "prompt": "Review the strategy for generating mock data for testing purposes, ensuring realism and coverage of edge cases.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-decoupling-analysis": {
        "description": "code-decoupling-analysis",
        "prompt": "Analyze the degree of code coupling between modules or components, suggesting refactoring to improve modularity and maintainability.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "regression-testing-suite-review": {
        "description": "regression-testing-suite-review",
        "prompt": "Review the regression testing suite, ensuring comprehensive coverage of critical functionalities and frequent updates to adapt to code changes.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "service-level-agreement-assessment": {
        "description": "service-level-agreement-assessment",
        "prompt": "Assess the compliance of service level agreements (SLAs) with performance, availability, and support commitments.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "git-workflow-optimization": {
        "description": "git-workflow-optimization",
        "prompt": "Optimize the Git workflow for version control, branching, merging, and code review processes to improve collaboration and code quality.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "fault-tolerance-analysis": {
        "description": "fault-tolerance-analysis",
        "prompt": "Analyze the system's fault tolerance mechanisms, identifying single points of failure and recommending redundancy or failover strategies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "mobile-app-performance-review": {
        "description": "mobile-app-performance-review",
        "prompt": "Review the performance of the mobile application, considering factors such as startup time, responsiveness, and battery consumption.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "documentation-automation-assessment": {
        "description": "documentation-automation-assessment",
        "prompt": "Assess the automation of documentation generation processes, ensuring accuracy, completeness, and integration with development workflows.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "container-security-evaluation": {
        "description": "container-security-evaluation",
        "prompt": "Evaluate the security posture of containerized environments, including container isolation, image scanning, and runtime protection mechanisms.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "technical-debt-analysis": {
        "description": "technical-debt-analysis",
        "prompt": "Analyze the accumulation of technical debt in the codebase, prioritizing refactoring efforts to minimize long-term maintenance costs.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "chaos-engineering-experiment-design": {
        "description": "chaos-engineering-experiment-design",
        "prompt": "Design chaos engineering experiments to simulate failure scenarios and evaluate the resilience of the system under stress.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "continuous-delivery-pipeline-review": {
        "description": "continuous-delivery-pipeline-review",
        "prompt": "Review the continuous delivery pipeline, ensuring automated deployment, testing, and validation of code changes.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "user-data-privacy-audit": {
        "description": "user-data-privacy-audit",
        "prompt": "Conduct a comprehensive audit of user data privacy practices, ensuring compliance with regulations and ethical data handling principles.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "serverless-function-optimization": {
        "description": "serverless-function-optimization",
        "prompt": "Optimize serverless functions for performance, cost efficiency, and resource utilization in cloud environments.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "observability-strategy-assessment": {
        "description": "observability-strategy-assessment",
        "prompt": "Assess the observability strategy, including logging, monitoring, and tracing capabilities, to enable effective troubleshooting and performance analysis.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "software-license-compliance-check": {
        "description": "software-license-compliance-check",
        "prompt": "Check software license compliance for dependencies, ensuring adherence to open-source licenses and avoiding legal risks.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "feature-toggle-strategy-review": {
        "description": "feature-toggle-strategy-review",
        "prompt": "Review the feature toggle strategy for enabling and disabling features, ensuring controlled rollouts and minimal impact on users.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-warehouse-optimization": {
        "description": "data-warehouse-optimization",
        "prompt": "Optimize data warehouse architecture and queries for performance, scalability, and cost efficiency in analytics and reporting.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "disaster-recovery-simulation": {
        "description": "disaster-recovery-simulation",
        "prompt": "Simulate disaster scenarios to test the effectiveness of the disaster recovery plan and validate backup and recovery procedures.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "graph-database-modeling-review": {
        "description": "graph-database-modeling-review",
        "prompt": "Review the modeling of graph database schemas, ensuring efficient representation of relationships and querying capabilities.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "automated-code-review-tool-evaluation": {
        "description": "automated-code-review-tool-evaluation",
        "prompt": "Evaluate the effectiveness of automated code review tools in identifying code quality issues, security vulnerabilities, and best practice violations.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "real-time-data-processing-strategy-review": {
        "description": "real-time-data-processing-strategy-review",
        "prompt": "Review the strategy for real-time data processing, including stream processing frameworks, scalability, and fault tolerance.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-cost-optimization-analysis": {
        "description": "cloud-cost-optimization-analysis",
        "prompt": "Analyze cloud usage and spending patterns, identifying opportunities for cost optimization through rightsizing, instance reservations, and resource tagging.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "multi-tenancy-architecture-evaluation": {
        "description": "multi-tenancy-architecture-evaluation",
        "prompt": "Evaluate the multi-tenancy architecture for scalability, isolation, and performance in serving multiple customers or tenants.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "dark-mode-support-assessment": {
        "description": "dark-mode-support-assessment",
        "prompt": "Assess the implementation of dark mode support in the user interface, ensuring compatibility, accessibility, and aesthetic consistency.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "concurrent-user-load-testing": {
        "description": "concurrent-user-load-testing",
        "prompt": "Conduct load testing with concurrent user scenarios to evaluate system performance under realistic usage patterns and peak loads.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "api-versioning-strategy-review": {
        "description": "api-versioning-strategy-review",
        "prompt": "Review the strategy for API versioning and backward compatibility, ensuring smooth transitions and minimal disruption for API consumers.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "serverless-cold-start-optimization": {
        "description": "serverless-cold-start-optimization",
        "prompt": "Optimize serverless function cold start times for improved responsiveness and user experience in event-driven applications.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "compliance-report-generation": {
        "description": "compliance-report-generation",
        "prompt": "Generate compliance reports documenting adherence to regulatory requirements, security standards, and industry best practices.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "observability-metrics-selection": {
        "description": "observability-metrics-selection",
        "prompt": "Select relevant metrics and key performance indicators (KPIs) for monitoring system health, performance, and user experience.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "automated-test-flakiness-analysis": {
        "description": "automated-test-flakiness-analysis",
        "prompt": "Analyze automated test flakiness patterns to identify root causes and improve test reliability and effectiveness.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "technical-interview-preparation": {
        "description": "technical-interview-preparation",
        "prompt": "Prepare technical interview questions and answers covering key concepts, algorithms, and problem-solving techniques.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "microservices-architecture-review": {
        "description": "microservices-architecture-review",
        "prompt": "Review the architecture of microservices, assessing service boundaries, communication protocols, and resilience patterns.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-encryption-key-management": {
        "description": "data-encryption-key-management",
        "prompt": "Evaluate the key management strategy for data encryption, ensuring secure generation, storage, rotation, and access control.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "machine-learning-training-data-quality-assessment": {
        "description": "machine-learning-training-data-quality-assessment",
        "prompt": "Assess the quality and diversity of training data used for machine learning models, identifying biases and data integrity issues.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "distributed-cache-implementation-review": {
        "description": "distributed-cache-implementation-review",
        "prompt": "Review the implementation of distributed caching mechanisms, assessing consistency, scalability, and cache eviction strategies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "container-image-scanning": {
        "description": "container-image-scanning",
        "prompt": "Scan container images for security vulnerabilities, malware, and compliance risks before deployment to production environments.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "event-driven-architecture-design-review": {
        "description": "event-driven-architecture-design-review",
        "prompt": "Review the design of event-driven architecture, including event sourcing, message brokers, and event-driven patterns.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-privacy-impact-assessment": {
        "description": "data-privacy-impact-assessment",
        "prompt": "Conduct a data privacy impact assessment to identify and mitigate privacy risks associated with data collection, processing, and storage.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-coverage-improvement-strategy": {
        "description": "code-coverage-improvement-strategy",
        "prompt": "Define a strategy for improving code coverage in automated tests, prioritizing critical components and edge cases.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "automated-infrastructure-provisioning-evaluation": {
        "description": "automated-infrastructure-provisioning-evaluation",
        "prompt": "Evaluate the effectiveness of automated infrastructure provisioning tools, ensuring consistency, scalability, and reliability.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "frontend-performance-optimization": {
        "description": "frontend-performance-optimization",
        "prompt": "Optimize frontend performance by reducing page load times, minimizing render-blocking resources, and optimizing asset delivery.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-replication-strategy-review": {
        "description": "data-replication-strategy-review",
        "prompt": "Review the strategy for data replication across distributed systems, ensuring consistency, durability, and latency requirements are met.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "documentation-translation-assessment": {
        "description": "documentation-translation-assessment",
        "prompt": "Assess the quality and accuracy of translated documentation for international audiences, ensuring clear and culturally appropriate content.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "incident-response-plan-review": {
        "description": "incident-response-plan-review",
        "prompt": "Review the incident response plan, including procedures for detecting, reporting, and mitigating security incidents and data breaches.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "mobile-app-security-assessment": {
        "description": "mobile-app-security-assessment",
        "prompt": "Conduct a security assessment of the mobile application, identifying vulnerabilities in authentication, data storage, and communication channels.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-archiving-strategy-review": {
        "description": "data-archiving-strategy-review",
        "prompt": "Review the strategy for data archiving, ensuring compliance with retention policies, legal requirements, and data accessibility needs.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "dependency-upgrade-strategy-definition": {
        "description": "dependency-upgrade-strategy-definition",
        "prompt": "Define a strategy for regular dependency upgrades, balancing the need for security patches, bug fixes, and compatibility with existing code.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "distributed-tracing-implementation-review": {
        "description": "distributed-tracing-implementation-review",
        "prompt": "Review the implementation of distributed tracing for monitoring and troubleshooting distributed systems, ensuring trace completeness and accuracy.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "zero-trust-security-model-assessment": {
        "description": "zero-trust-security-model-assessment",
        "prompt": "Assess the implementation of a zero-trust security model, including identity verification, least privilege access, and continuous authentication.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-loss-prevention-strategy-evaluation": {
        "description": "data-loss-prevention-strategy-evaluation",
        "prompt": "Evaluate the effectiveness of data loss prevention (DLP) strategies, including encryption, access controls, and data classification policies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "serverless-application-architecture-review": {
        "description": "serverless-application-architecture-review",
        "prompt": "Review the architecture of serverless applications, assessing function composition, event triggers, and resource provisioning.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "continuous-security-monitoring-setup": {
        "description": "continuous-security-monitoring-setup",
        "prompt": "Set up continuous security monitoring tools and processes to detect and respond to security threats and anomalies in real-time.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-quality-assurance-framework-definition": {
        "description": "data-quality-assurance-framework-definition",
        "prompt": "Define a framework for ensuring data quality, including data profiling, cleansing, validation, and monitoring processes.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "serverless-performance-tuning": {
        "description": "serverless-performance-tuning",
        "prompt": "Tune serverless application performance by optimizing function execution time, minimizing cold start latency, and optimizing resource allocation.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "observability-data-storage-strategy-review": {
        "description": "observability-data-storage-strategy-review",
        "prompt": "Review the strategy for storing observability data, including logs, metrics, and traces, ensuring scalability, durability, and cost-effectiveness.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "incident-response-simulation-exercise": {
        "description": "incident-response-simulation-exercise",
        "prompt": "Conduct an incident response simulation exercise to test the effectiveness of incident detection, escalation, and resolution procedures.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-privacy-by-design-assessment": {
        "description": "data-privacy-by-design-assessment",
        "prompt": "Assess the implementation of data privacy by design principles, including data minimization, anonymization, and user consent mechanisms.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-masking-and-redaction-strategy-review": {
        "description": "data-masking-and-redaction-strategy-review",
        "prompt": "Review the strategy for data masking and redaction to protect sensitive information in non-production environments and reports.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-configuration-security-audit": {
        "description": "cloud-configuration-security-audit",
        "prompt": "Conduct a security audit of cloud infrastructure configurations, including identity and access management (IAM), network security, and encryption settings.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "chaos-engineering-game-day-planning": {
        "description": "chaos-engineering-game-day-planning",
        "prompt": "Plan a chaos engineering game day to simulate failure scenarios and validate the resilience of critical systems and processes.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "code-review-automation-setup": {
        "description": "code-review-automation-setup",
        "prompt": "Set up automated code review tools and workflows to enforce coding standards, best practices, and security guidelines.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "service-discovery-mechanism-review": {
        "description": "service-discovery-mechanism-review",
        "prompt": "Review the mechanism for service discovery in microservices architecture, ensuring dynamic routing, load balancing, and fault tolerance.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-native-security-framework-assessment": {
        "description": "cloud-native-security-framework-assessment",
        "prompt": "Assess the implementation of a cloud-native security framework, including container security, network segmentation, and compliance controls.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "incident-response-playbook-development": {
        "description": "incident-response-playbook-development",
        "prompt": "Develop an incident response playbook with predefined procedures, communication protocols, and escalation paths for different types of security incidents.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-erasure-and-destruction-policy-review": {
        "description": "data-erasure-and-destruction-policy-review",
        "prompt": "Review the policy and procedures for data erasure and destruction, ensuring compliance with data protection regulations and privacy requirements.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "continuous-compliance-audit-automation": {
        "description": "continuous-compliance-audit-automation",
        "prompt": "Automate compliance audits and assessments to continuously monitor adherence to regulatory requirements, security policies, and industry standards.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-cost-budget-management-strategy": {
        "description": "cloud-cost-budget-management-strategy",
        "prompt": "Define a strategy for managing cloud cost budgets, including cost tracking, forecasting, optimization, and cost allocation.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "secure-software-development-training-program": {
        "description": "secure-software-development-training-program",
        "prompt": "Develop a training program on secure software development practices, covering topics such as secure coding, threat modeling, and secure SDLC.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "service-level-objectives-definition": {
        "description": "service-level-objectives-definition",
        "prompt": "Define service level objectives (SLOs) for critical system metrics, such as availability, latency, throughput, and error rates.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "multi-cloud-architecture-assessment": {
        "description": "multi-cloud-architecture-assessment",
        "prompt": "Assess the architecture for multi-cloud deployment, evaluating factors such as interoperability, data sovereignty, and redundancy.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "software-vulnerability-management-program": {
        "description": "software-vulnerability-management-program",
        "prompt": "Establish a software vulnerability management program, including vulnerability scanning, patch management, and vulnerability disclosure processes.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "container-runtime-security-assessment": {
        "description": "container-runtime-security-assessment",
        "prompt": "Conduct a security assessment of container runtimes, including container isolation, privilege escalation prevention, and kernel hardening.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "incident-response-training-exercise": {
        "description": "incident-response-training-exercise",
        "prompt": "Conduct an incident response training exercise involving simulated security incidents to test the effectiveness of response procedures and team coordination.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-retention-policy-review": {
        "description": "data-retention-policy-review",
        "prompt": "Review the data retention policy, ensuring compliance with legal and regulatory requirements, as well as addressing data storage, deletion, and archival procedures.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "automated-security-testing-framework-setup": {
        "description": "automated-security-testing-framework-setup",
        "prompt": "Set up an automated security testing framework to perform regular scans for vulnerabilities, security misconfigurations, and compliance violations.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-encryption-in-transit-and-at-rest-review": {
        "description": "data-encryption-in-transit-and-at-rest-review",
        "prompt": "Review the implementation of data encryption mechanisms for data in transit and at rest, ensuring encryption protocols, key management, and cryptographic algorithms meet security standards.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-native-monitoring-strategy-assessment": {
        "description": "cloud-native-monitoring-strategy-assessment",
        "prompt": "Assess the cloud-native monitoring strategy, evaluating observability, alerting, and troubleshooting capabilities for distributed systems and microservices architectures.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "secure-coding-guidelines-development": {
        "description": "secure-coding-guidelines-development",
        "prompt": "Develop secure coding guidelines and best practices for developers, covering topics such as input validation, authentication, authorization, and data sanitization.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-breach-simulation-exercise": {
        "description": "data-breach-simulation-exercise",
        "prompt": "Conduct a data breach simulation exercise to assess preparedness, coordination, and effectiveness of incident response procedures in mitigating data breaches.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-access-control-policy-review": {
        "description": "cloud-access-control-policy-review",
        "prompt": "Review the cloud access control policy, including IAM roles, permissions, and access policies, to ensure least privilege access and proper segregation of duties.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "threat-modeling-workshop": {
        "description": "threat-modeling-workshop",
        "prompt": "Facilitate a threat modeling workshop involving stakeholders to identify and prioritize potential security threats, vulnerabilities, and countermeasures in the system.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-privacy-impact-assessment-framework": {
        "description": "data-privacy-impact-assessment-framework",
        "prompt": "Develop a framework for conducting data privacy impact assessments (DPIAs), including assessment criteria, risk evaluation methods, and mitigation strategies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-awareness-training-program": {
        "description": "security-awareness-training-program",
        "prompt": "Design and implement a security awareness training program for employees, covering topics such as phishing awareness, password security, and data protection practices.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "incident-response-automation-framework-setup": {
        "description": "incident-response-automation-framework-setup",
        "prompt": "Set up an incident response automation framework to automate response actions, such as alert triaging, evidence collection, and incident containment.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-identity-and-access-management-review": {
        "description": "cloud-identity-and-access-management-review",
        "prompt": "Review the cloud identity and access management (IAM) setup, including user provisioning, authentication methods, and role-based access control (RBAC) policies.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-privacy-compliance-training": {
        "description": "data-privacy-compliance-training",
        "prompt": "Deliver data privacy compliance training sessions to educate employees on data protection regulations, privacy principles, and their responsibilities in safeguarding sensitive information.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "container-security-scanning-integration": {
        "description": "container-security-scanning-integration",
        "prompt": "Integrate container security scanning tools into the CI/CD pipeline to automatically scan container images for vulnerabilities and compliance issues before deployment.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-incident-response-playbook-refinement": {
        "description": "security-incident-response-playbook-refinement",
        "prompt": "Refine the security incident response playbook based on lessons learned from past incidents, emerging threats, and changes in the threat landscape.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-classification-policy-development": {
        "description": "data-classification-policy-development",
        "prompt": "Develop a data classification policy to categorize data assets based on sensitivity, confidentiality, and regulatory requirements, and define appropriate handling and protection measures.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "penetration-testing-scope-definition": {
        "description": "penetration-testing-scope-definition",
        "prompt": "Define the scope and objectives for penetration testing engagements, including target systems, testing methodologies, and rules of engagement.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-incident-response-drill": {
        "description": "security-incident-response-drill",
        "prompt": "Conduct a security incident response drill to simulate a real-world security incident and evaluate the effectiveness of response procedures, communication channels, and coordination.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "access-control-policy-automation": {
        "description": "access-control-policy-automation",
        "prompt": "Automate access control policy management processes, including policy creation, enforcement, review, and revocation, to ensure consistent and secure access permissions.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-breach-forensics-investigation": {
        "description": "data-breach-forensics-investigation",
        "prompt": "Perform a forensics investigation following a data breach incident to identify the root cause, extent of the breach, data exfiltration methods, and impact on affected systems and users.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-configuration-orchestration-automation": {
        "description": "cloud-configuration-orchestration-automation",
        "prompt": "Automate cloud configuration orchestration processes using infrastructure as code (IaC) tools to provision and manage cloud resources securely and efficiently.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "incident-response-tabletop-exercise": {
        "description": "incident-response-tabletop-exercise",
        "prompt": "Facilitate an incident response tabletop exercise involving key stakeholders to simulate coordinated response actions and decision-making processes during a security incident.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-loss-prevention-solution-evaluation": {
        "description": "data-loss-prevention-solution-evaluation",
        "prompt": "Evaluate data loss prevention (DLP) solutions for data discovery, classification, monitoring, and protection capabilities, and select the most suitable solution for the organization's needs.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-information-and-event-management-setup": {
        "description": "security-information-and-event-management-setup",
        "prompt": "Set up a security information and event management (SIEM) system to centralize log collection, analysis, and correlation for proactive threat detection and incident response.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-policy-documentation-revision": {
        "description": "security-policy-documentation-revision",
        "prompt": "Revise and update security policy documentation to reflect changes in security requirements, regulations, industry standards, and organizational practices.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "cloud-incident-response-strategy-development": {
        "description": "cloud-incident-response-strategy-development",
        "prompt": "Develop a cloud incident response strategy tailored to address security incidents specific to cloud environments, including shared responsibility model considerations and cloud service provider integrations.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "vulnerability-disclosure-program-implementation": {
        "description": "vulnerability-disclosure-program-implementation",
        "prompt": "Implement a vulnerability disclosure program (VDP) to establish channels for responsible disclosure of security vulnerabilities by external researchers, facilitate coordination, and ensure timely remediation.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-compliance-audit-preparation": {
        "description": "security-compliance-audit-preparation",
        "prompt": "Prepare for security compliance audits by conducting internal audits, gap assessments, and remediation activities to ensure readiness and compliance with regulatory requirements and industry standards.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-incident-response-team-training": {
        "description": "security-incident-response-team-training",
        "prompt": "Provide specialized training for the security incident response team on incident detection, analysis, containment, eradication, and recovery procedures, as well as effective communication and collaboration.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "threat-intelligence-feed-integration": {
        "description": "threat-intelligence-feed-integration",
        "prompt": "Integrate threat intelligence feeds into security monitoring and incident response systems to enhance threat detection capabilities and prioritize response actions based on real-time threat intelligence.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-encryption-key-rotation-policy-definition": {
        "description": "data-encryption-key-rotation-policy-definition",
        "prompt": "Define a data encryption key rotation policy specifying frequency, methods, and procedures for securely rotating encryption keys to mitigate the risk of key compromise and data exposure.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-training-awareness-assessment": {
        "description": "security-training-awareness-assessment",
        "prompt": "Assess the effectiveness of security training and awareness programs through knowledge assessments, simulated phishing exercises, and feedback mechanisms to measure employee understanding and behavior change.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "incident-response-post-mortem-analysis": {
        "description": "incident-response-post-mortem-analysis",
        "prompt": "Conduct a post-mortem analysis of security incidents to identify root causes, lessons learned, and areas for improvement in incident response processes, controls, and detection mechanisms.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "data-privacy-impact-assessment-automation": {
        "description": "data-privacy-impact-assessment-automation",
        "prompt": "Automate data privacy impact assessments (DPIAs) using predefined templates, workflows, and assessment criteria to streamline the assessment process and ensure consistent evaluation of data processing activities.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
      "security-awareness-campaign-planning": {
        "description": "security-awareness-campaign-planning",
        "prompt": "Plan and execute a security awareness campaign to promote security best practices, raise awareness of common threats, and foster a culture of security within the organization.",
        "context": {
          "codebase": true,
          "selection": true,
          "currentFile": true
        }
      },
        "beginner-calculate-sum": {
          "description": "beginner-calculate-sum",
          "prompt": "Write a program that takes two numbers as input from the user and outputs their sum.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-check-even-odd": {
          "description": "beginner-check-even-odd",
          "prompt": "Create a function that determines whether a given number is even or odd.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-maximum-element": {
          "description": "beginner-find-maximum-element",
          "prompt": "Write a function that finds and returns the maximum element in a given array.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-reverse-string": {
          "description": "beginner-reverse-string",
          "prompt": "Implement a function that reverses a given string.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-factorial": {
          "description": "beginner-calculate-factorial",
          "prompt": "Create a program that computes the factorial of a non-negative integer input by the user.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-sort-array": {
          "description": "beginner-sort-array",
          "prompt": "Write a function to sort an array of integers in ascending order.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-longest-palindrome-length": {
          "description": "beginner-longest-palindrome-length",
          "prompt": "Develop an efficient algorithm to find the length of the longest palindrome that can be constructed from a given string.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-valid-palindrome-check": {
          "description": "beginner-valid-palindrome-check",
          "prompt": "Create a function to determine if a given string is a valid palindrome, ignoring non-alphanumeric characters and ignoring case.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-power": {
          "description": "beginner-calculate-power",
          "prompt": "Write a function to calculate the power of a given base to a given exponent.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-unit-testing-guidelines": {
          "description": "beginner-unit-testing-guidelines",
          "prompt": "Define a set of guidelines for writing effective unit tests for a software project.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-version-control-best-practices": {
          "description": "beginner-version-control-best-practices",
          "prompt": "Outline the best practices for using version control systems such as Git in collaborative software development projects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-code-documentation-standards": {
          "description": "beginner-code-documentation-standards",
          "prompt": "Define the standards and conventions for documenting source code to ensure clarity and maintainability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-debugging-techniques": {
          "description": "beginner-debugging-techniques",
          "prompt": "Discuss various techniques and strategies for debugging software issues effectively.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-algorithm-complexity-analysis": {
          "description": "beginner-algorithm-complexity-analysis",
          "prompt": "Explain the importance of analyzing algorithm complexity and provide examples of common complexity classes.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-data-structure-selection-guide": {
          "description": "beginner-data-structure-selection-guide",
          "prompt": "Offer guidance on selecting appropriate data structures for solving different types of problems.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-error-handling-strategies": {
          "description": "beginner-error-handling-strategies",
          "prompt": "Explore different strategies for handling errors and exceptions in software development.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-coding-style-conventions": {
          "description": "beginner-coding-style-conventions",
          "prompt": "Define a set of coding style conventions to ensure consistent and readable code across a software project.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-algorithm-optimization-tips": {
          "description": "beginner-algorithm-optimization-tips",
          "prompt": "Provide tips and techniques for optimizing algorithms to improve their efficiency and performance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-code-refactoring-guidelines": {
          "description": "beginner-code-refactoring-guidelines",
          "prompt": "Offer guidelines and best practices for refactoring code to enhance its readability, maintainability, and performance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-software-design-patterns-overview": {
          "description": "beginner-software-design-patterns-overview",
          "prompt": "Give an overview of commonly used software design patterns and their applications in software development.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-software-architecture-fundamentals": {
          "description": "beginner-software-architecture-fundamentals",
          "prompt": "Explain the fundamental concepts and principles of software architecture and their significance in designing robust and scalable systems.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-database-design-best-practices": {
          "description": "beginner-database-design-best-practices",
          "prompt": "Discuss best practices for designing efficient and scalable databases to meet the requirements of modern applications.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-agile-development-methodology-introduction": {
          "description": "beginner-agile-development-methodology-introduction",
          "prompt": "Introduce the Agile development methodology and its key principles, benefits, and challenges.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-test-driven-development-overview": {
          "description": "beginner-test-driven-development-overview",
          "prompt": "Provide an overview of the test-driven development (TDD) approach and its role in ensuring software quality and maintainability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-continuous-integration-benefits": {
          "description": "beginner-continuous-integration-benefits",
          "prompt": "Explain the benefits of implementing continuous integration (CI) practices in software development projects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-code-review-process-explanation": {
          "description": "beginner-code-review-process-explanation",
          "prompt": "Describe the code review process and its importance in ensuring code quality, sharing knowledge, and fostering collaboration among team members.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-software-testing-methodologies-overview": {
          "description": "beginner-software-testing-methodologies-overview",
          "prompt": "Give an overview of various software testing methodologies, including their advantages, disadvantages, and suitable use cases.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-versioning-scheme-selection-guide": {
          "description": "beginner-versioning-scheme-selection-guide",
          "prompt": "Offer guidance on selecting an appropriate versioning scheme for software projects, considering factors such as compatibility, clarity, and scalability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-secure-coding-principles-explanation": {
          "description": "beginner-secure-coding-principles-explanation",
          "prompt": "Explain the fundamental principles of secure coding and provide examples of common security vulnerabilities and how to mitigate them.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-clean-code-principles-overview": {
          "description": "beginner-clean-code-principles-overview",
          "prompt": "Give an overview of clean code principles and practices, emphasizing the importance of readability, maintainability, and simplicity in software development.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-code-review-checklist-creation": {
          "description": "beginner-code-review-checklist-creation",
          "prompt": "Create a comprehensive checklist for conducting effective code reviews, covering aspects such as code quality, performance, security, and maintainability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-continuous-deployment-benefits": {
          "description": "beginner-continuous-deployment-benefits",
          "prompt": "Discuss the benefits of implementing continuous deployment (CD) practices in software development projects, including faster time-to-market, improved quality, and increased collaboration.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-software-maintenance-strategies": {
          "description": "beginner-software-maintenance-strategies",
          "prompt": "Explore different strategies and approaches for maintaining and evolving software systems over time, including corrective, adaptive, perfective, and preventive maintenance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-dependency-management-best-practices": {
          "description": "beginner-dependency-management-best-practices",
          "prompt": "Share best practices for managing dependencies in software projects to ensure stability, reliability, and maintainability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-binary-search": {
          "description": "beginner-implement-binary-search",
          "prompt": "Incorporate a binary search algorithm into the provided code snippet to efficiently find a target element within a sorted array.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-generate-fibonacci-sequence": {
          "description": "beginner-generate-fibonacci-sequence",
          "prompt": "Develop a function in the code context to generate the Fibonacci sequence up to a specified limit, utilizing iterative or recursive approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-reverse-linked-list": {
          "description": "beginner-reverse-linked-list",
          "prompt": "Implement a function to reverse a singly linked list in the given code snippet, preserving both the structure and the content of the list.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-count-occurrences": {
          "description": "beginner-count-occurrences",
          "prompt": "Write a function to count the occurrences of a specific element in an array within the provided code, considering both linear and efficient approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-stack-implementation": {
          "description": "beginner-stack-implementation",
          "prompt": "Define a stack data structure and its operations (push, pop, peek) within the code context, demonstrating stack manipulation and usage.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-queue-implementation": {
          "description": "beginner-queue-implementation",
          "prompt": "Create a queue data structure with enqueue and dequeue operations in the code snippet, showcasing its functionality and applications.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-check-palindrome-linked-list": {
          "description": "beginner-check-palindrome-linked-list",
          "prompt": "Devise an algorithm within the code context to determine if a given singly linked list is a palindrome, considering both iterative and recursive approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-kth-element": {
          "description": "beginner-find-kth-element",
          "prompt": "Design a function to find the kth element from the end of a singly linked list in the provided code, optimizing for both time and space complexity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-trie": {
          "description": "beginner-implement-trie",
          "prompt": "Implement a trie (prefix tree) data structure in the code snippet, supporting insertion, search, and deletion operations efficiently.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-detect-loop-linked-list": {
          "description": "beginner-detect-loop-linked-list",
          "prompt": "Detect the presence of a loop in a singly linked list within the given code, employing Floyd's cycle detection algorithm or other suitable approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-nth-fibonacci": {
          "description": "beginner-calculate-nth-fibonacci",
          "prompt": "Develop a function to calculate the nth Fibonacci number in the code context, optimizing for both time and space efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-middle-element-linked-list": {
          "description": "beginner-find-middle-element-linked-list",
          "prompt": "Find the middle element of a singly linked list in the provided code, utilizing techniques such as slow and fast pointers or traversal counts.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-heap": {
          "description": "beginner-implement-heap",
          "prompt": "Construct a binary heap data structure with operations like insertion, deletion, and heapify within the code snippet, demonstrating its heap property.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-merge-two-sorted-lists": {
          "description": "beginner-merge-two-sorted-lists",
          "prompt": "Merge two sorted singly linked lists into a single sorted list in the code context, considering both iterative and recursive merging techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-priority-queue": {
          "description": "beginner-implement-priority-queue",
          "prompt": "Design a priority queue data structure in the provided code, supporting operations such as insertion and deletion of elements based on priority.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-reverse-integer": {
          "description": "beginner-reverse-integer",
          "prompt": "Implement a function to reverse an integer value in the code snippet, handling cases of negative numbers and integer overflow appropriately.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-majority-element": {
          "description": "beginner-find-majority-element",
          "prompt": "Identify the majority element (if exists) in an array within the code context, employing techniques like Boyer-Moore Voting Algorithm or hash maps.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-avl-tree": {
          "description": "beginner-implement-avl-tree",
          "prompt": "Create an AVL tree data structure in the code snippet, supporting operations like insertion, deletion, and balancing to maintain AVL properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-quick-sort": {
          "description": "beginner-implement-quick-sort",
          "prompt": "Implement the quicksort algorithm within the code context, showcasing both recursive and iterative approaches for efficient sorting.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-breadth-first-search": {
          "description": "beginner-implement-breadth-first-search",
          "prompt": "Implement breadth-first search (BFS) traversal in a graph represented as an adjacency list or matrix in the code snippet, exploring neighboring vertices iteratively.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-depth-first-search": {
          "description": "beginner-implement-depth-first-search",
          "prompt": "Develop depth-first search (DFS) traversal in the given code, recursively exploring adjacent vertices and backtracking when necessary.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-gcd": {
          "description": "beginner-calculate-gcd",
          "prompt": "Calculate the greatest common divisor (GCD) of two numbers in the code context, employing Euclidean algorithm or other suitable techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-minimum-element": {
          "description": "beginner-find-minimum-element",
          "prompt": "Find the minimum element in a rotated sorted array within the provided code, utilizing binary search or other efficient approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-subarray-with-sum": {
          "description": "beginner-find-subarray-with-sum",
          "prompt": "Identify a contiguous subarray with a given sum in the code snippet, employing sliding window or prefix sum techniques for optimal time complexity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-stack-using-queue": {
          "description": "beginner-implement-stack-using-queue",
          "prompt": "Implement a stack data structure using queues in the code context, exploring both two-queue and one-queue approaches for stack operations.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-missing-number": {
          "description": "beginner-find-missing-number",
          "prompt": "Find the missing number in an array containing elements from 1 to n in the given code, employing mathematical or bitwise XOR-based solutions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-maximum-subarray-sum": {
          "description": "beginner-find-maximum-subarray-sum",
          "prompt": "Compute the maximum sum of a contiguous subarray within the provided code, utilizing Kadane's algorithm or divide-and-conquer approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-merge-sort": {
          "description": "beginner-implement-merge-sort",
          "prompt": "Implement the merge sort algorithm in the code snippet, demonstrating both recursive and iterative approaches for efficient sorting.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-check-balanced-parentheses": {
          "description": "beginner-check-balanced-parentheses",
          "prompt": "Check if the parentheses in a given string are balanced or not in the provided code, employing stack-based or counting approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-duplicate-element": {
          "description": "beginner-find-duplicate-element",
          "prompt": "Detect the duplicate element in an array of integers within the code context, exploring sorting-based, hashing, or Floyd's Tortoise and Hare algorithm.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-dijkstra-algorithm": {
          "description": "beginner-implement-dijkstra-algorithm",
          "prompt": "Implement Dijkstra's shortest path algorithm in a weighted graph represented as an adjacency list or matrix in the code snippet.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-radix-sort": {
          "description": "beginner-implement-radix-sort",
          "prompt": "Develop the radix sort algorithm within the provided code, considering both LSD (Least Significant Digit) and MSD (Most Significant Digit) variants.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-kruskal-algorithm": {
          "description": "beginner-implement-kruskal-algorithm",
          "prompt": "Implement Kruskal's minimum spanning tree algorithm in a weighted graph represented as an adjacency list or matrix in the code snippet.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-bubble-sort": {
          "description": "beginner-implement-bubble-sort",
          "prompt": "Implement the bubble sort algorithm within the code context, exploring both optimized and unoptimized versions for sorting arrays efficiently.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-kth-smallest-element": {
          "description": "beginner-find-kth-smallest-element",
          "prompt": "Find the kth smallest element in an unsorted array within the provided code, utilizing techniques like quickselect or min-heap.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-anagram-strings": {
          "description": "beginner-determine-anagram-strings",
          "prompt": "Determine if two given strings are anagrams of each other in the code context, considering both sorting-based and frequency-counting approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-trie-based-autocomplete": {
          "description": "beginner-implement-trie-based-autocomplete",
          "prompt": "Implement autocomplete functionality using a trie data structure within the provided code, supporting prefix matching and efficient suggestion retrieval.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-convert-binary-to-decimal": {
          "description": "beginner-convert-binary-to-decimal",
          "prompt": "Convert a binary number represented as a string to its decimal equivalent in the code snippet, employing iterative or recursive conversion techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-insertion-sort": {
          "description": "beginner-implement-insertion-sort",
          "prompt": "Implement the insertion sort algorithm within the provided code, exploring both iterative and recursive variants for sorting arrays efficiently.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-pairs-with-sum": {
          "description": "beginner-find-pairs-with-sum",
          "prompt": "Find all pairs of integers within an array that sum up to a given target sum in the code context, utilizing hashing or two-pointer techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-bfs-shortest-path": {
          "description": "beginner-implement-bfs-shortest-path",
          "prompt": "Implement the shortest path algorithm using breadth-first search (BFS) in a weighted graph represented as an adjacency list or matrix in the code snippet.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-quick-select": {
          "description": "beginner-implement-quick-select",
          "prompt": "Implement the quick select algorithm to find the kth smallest element in an unsorted array within the provided code, optimizing for time complexity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-all-permutations": {
          "description": "beginner-find-all-permutations",
          "prompt": "Write a function to generate all permutations of a given string in the code snippet, exploring backtracking or iterative approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-binary-tree": {
          "description": "beginner-implement-binary-tree",
          "prompt": "Implement a binary tree data structure along with traversal methods (inorder, preorder, postorder) in the provided code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-palindrome-number": {
          "description": "beginner-determine-palindrome-number",
          "prompt": "Determine if a given integer is a palindrome number in the code context, considering both string conversion and mathematical approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-closest-value-bst": {
          "description": "beginner-find-closest-value-bst",
          "prompt": "Find the closest value to a given target in a binary search tree (BST) within the provided code, employing iterative or recursive traversal.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-shell-sort": {
          "description": "beginner-implement-shell-sort",
          "prompt": "Implement the shell sort algorithm within the code context, exploring different gap sequences and gap insertion strategies for efficient sorting.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-detect-anagrams-array": {
          "description": "beginner-detect-anagrams-array",
          "prompt": "Detect all pairs of anagrams within an array of strings in the code snippet, utilizing hashing or sorting-based techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-heap-sort": {
          "description": "beginner-implement-heap-sort",
          "prompt": "Implement the heap sort algorithm within the provided code, showcasing both max-heap and min-heap variants for efficient sorting.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-reverse-words-in-string": {
          "description": "beginner-reverse-words-in-string",
          "prompt": "Reverse the order of words in a given string in the code context, considering whitespace and punctuation as delimiters.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-avl-tree-insertion": {
          "description": "beginner-implement-avl-tree-insertion",
          "prompt": "Implement insertion operation in an AVL tree data structure within the code snippet, ensuring balance factors are updated and rotations are performed.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-convert-roman-to-integer": {
          "description": "beginner-convert-roman-to-integer",
          "prompt": "Convert a Roman numeral string to an integer value in the provided code, handling subtractive and additive numeral combinations.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-counting-sort": {
          "description": "beginner-implement-counting-sort",
          "prompt": "Develop the counting sort algorithm within the code context, handling both integer and character array inputs efficiently.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-valid-parentheses": {
          "description": "beginner-determine-valid-parentheses",
          "prompt": "Determine if a given string containing parentheses is valid in the code snippet, considering nested parentheses and proper ordering.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-lca-binary-tree": {
          "description": "beginner-find-lca-binary-tree",
          "prompt": "Find the lowest common ancestor (LCA) of two nodes in a binary tree within the provided code, employing recursive or iterative approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-nth-prime-number": {
          "description": "beginner-calculate-nth-prime-number",
          "prompt": "Calculate the nth prime number in the code context, exploring efficient prime number generation techniques like Sieve of Eratosthenes.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-missing-element-array": {
          "description": "beginner-find-missing-element-array",
          "prompt": "Find the missing element in an array containing elements from 1 to n in the code snippet, utilizing XOR-based or summation-based solutions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-bucket-sort": {
          "description": "beginner-implement-bucket-sort",
          "prompt": "Implement the bucket sort algorithm within the provided code, considering both uniform and non-uniform bucket distribution strategies.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-valid-sudoku": {
          "description": "beginner-determine-valid-sudoku",
          "prompt": "Determine if a given 9x9 Sudoku board is valid in the code context, ensuring each row, column, and 3x3 subgrid contains unique digits.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-trie-autocomplete": {
          "description": "beginner-implement-trie-autocomplete",
          "prompt": "Implement autocomplete functionality using a trie data structure within the provided code, supporting efficient prefix matching and suggestion retrieval.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-generate-gray-code": {
          "description": "beginner-generate-gray-code",
          "prompt": "Generate the Gray code sequence of n bits in the code snippet, employing bitwise XOR or recursive gray code generation techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-segment-tree": {
          "description": "beginner-implement-segment-tree",
          "prompt": "Implement a segment tree data structure with range query and update operations in the provided code, showcasing lazy propagation and memory optimization.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-rearrange-positive-negative": {
          "description": "beginner-rearrange-positive-negative",
          "prompt": "Rearrange the elements of an array so that positive and negative numbers appear alternatively in the code context, preserving the order of elements.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-maximum-subarray": {
          "description": "beginner-calculate-maximum-subarray",
          "prompt": "Calculate the maximum sum of a contiguous subarray within the provided code, exploring Kadane's algorithm or divide-and-conquer approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-valid-ip-address": {
          "description": "beginner-determine-valid-ip-address",
          "prompt": "Determine if a given string is a valid IPv4 address in the code snippet, considering both format validation and range checks.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-doubly-linked-list": {
          "description": "beginner-implement-doubly-linked-list",
          "prompt": "Implement a doubly linked list data structure along with insertion, deletion, and traversal methods in the provided code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-graph-representation": {
          "description": "beginner-implement-graph-representation",
          "prompt": "Implement graph representation using adjacency list or matrix in the code snippet, showcasing methods for graph creation and manipulation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-maximum-depth-binary-tree": {
          "description": "beginner-find-maximum-depth-binary-tree",
          "prompt": "Find the maximum depth of a binary tree in the code context, employing depth-first search (DFS) or breadth-first search (BFS) traversal.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-merge-k-sorted-lists": {
          "description": "beginner-merge-k-sorted-lists",
          "prompt": "Merge k sorted singly linked lists into a single sorted list in the provided code, exploring heap-based or divide-and-conquer merging strategies.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-ugly-number": {
          "description": "beginner-calculate-ugly-number",
          "prompt": "Calculate the nth ugly number in the code snippet, considering dynamic programming or priority queue-based solutions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-valid-palindrome-linked-list": {
          "description": "beginner-determine-valid-palindrome-linked-list",
          "prompt": "Determine if a given singly linked list is a valid palindrome in the provided code, exploring iterative and recursive comparison techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-rabin-karp-algorithm": {
          "description": "beginner-implement-rabin-karp-algorithm",
          "prompt": "Implement the Rabin-Karp string matching algorithm in the code context, showcasing its application in pattern searching and string comparison.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-count-total-occurrences-element": {
          "description": "beginner-count-total-occurrences-element",
          "prompt": "Count the total occurrences of a given element in a sorted array within the provided code, employing binary search or linear scanning.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-valid-parentheses-combinations": {
          "description": "beginner-determine-valid-parentheses-combinations",
          "prompt": "Generate all valid combinations of n pairs of parentheses in the code snippet, ensuring proper nesting and balanced parentheses.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-maximum-profit-stock": {
          "description": "beginner-calculate-maximum-profit-stock",
          "prompt": "Calculate the maximum profit that can be obtained by buying and selling stocks represented as an array of prices in the provided code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-determine-power-of-two": {
          "description": "beginner-determine-power-of-two",
          "prompt": "Determine if a given integer is a power of two in the code context, considering bitwise and mathematical approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-implement-red-black-tree-insertion": {
          "description": "beginner-implement-red-black-tree-insertion",
          "prompt": "Implement insertion operation in a red-black tree data structure within the code snippet, ensuring color balancing and rotations.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-find-k-closest-points-origin": {
          "description": "beginner-find-k-closest-points-origin",
          "prompt": "Find the k closest points to the origin (0,0) in a 2D plane represented as an array of points in the provided code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "beginner-calculate-maximum-xor-array": {
          "description": "beginner-calculate-maximum-xor-array",
          "prompt": "Calculate the maximum XOR value of two elements in an array within the code context, employing trie-based or bitwise XOR-based approaches.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-implement-matrix-multiplication": {
          "description": "engineering-implement-matrix-multiplication",
          "prompt": "Implement matrix multiplication in the provided code, considering optimization techniques for large matrices and parallel processing.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-calculate-definite-integrals": {
          "description": "engineering-calculate-definite-integrals",
          "prompt": "Write functions to numerically calculate definite integrals using methods like Simpson's rule or Gaussian quadrature in the code snippet.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-implement-finite-element-method": {
          "description": "engineering-implement-finite-element-method",
          "prompt": "Implement the finite element method (FEM) for solving partial differential equations (PDEs) in the given code, considering mesh generation and numerical integration.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-solve-systems-linear-equations": {
          "description": "engineering-solve-systems-linear-equations",
          "prompt": "Write functions to solve systems of linear equations using methods like Gaussian elimination or LU decomposition in the code context.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-calculate-fourier-transform": {
          "description": "engineering-calculate-fourier-transform",
          "prompt": "Develop algorithms to calculate discrete Fourier transform (DFT) or fast Fourier transform (FFT) in the provided code, optimizing for computational efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-implement-newton-raphson-method": {
          "description": "engineering-implement-newton-raphson-method",
          "prompt": "Implement the Newton-Raphson method for solving nonlinear equations in the code snippet, handling convergence criteria and initial guess selection.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-perform-linear-regression-analysis": {
          "description": "engineering-perform-linear-regression-analysis",
          "prompt": "Write functions to perform linear regression analysis on experimental data in the provided code, including least squares fitting and coefficient determination.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-electronic-circuits": {
          "description": "engineering-simulate-electronic-circuits",
          "prompt": "Develop simulation algorithms for electronic circuits in the code context, utilizing techniques like SPICE models or nodal analysis.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-calculate-root-finding-methods": {
          "description": "engineering-calculate-root-finding-methods",
          "prompt": "Implement root-finding methods like bisection, secant, and Brent's method for nonlinear equations in the provided code, considering accuracy and convergence rates.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-stress-strain-properties": {
          "description": "engineering-analyze-stress-strain-properties",
          "prompt": "Write functions to analyze stress-strain properties of materials in the code snippet, including calculations for Young's modulus, yield strength, and ultimate strength.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-perform-circuit-analysis": {
          "description": "engineering-perform-circuit-analysis",
          "prompt": "Develop algorithms for circuit analysis including nodal analysis, mesh analysis, and transient analysis in the provided code, considering complex circuits and components.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-dynamic-systems": {
          "description": "engineering-simulate-dynamic-systems",
          "prompt": "Implement simulation algorithms for dynamic systems represented by ordinary differential equations (ODEs) in the code context, considering time integration methods and stability analysis.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-structural-designs": {
          "description": "engineering-optimize-structural-designs",
          "prompt": "Develop optimization algorithms for structural designs considering factors like weight, strength, and cost in the provided code, employing techniques like genetic algorithms or gradient descent.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-calculate-heat-transfer-equations": {
          "description": "engineering-calculate-heat-transfer-equations",
          "prompt": "Write functions to solve heat transfer equations for conduction, convection, and radiation in the code snippet, considering boundary conditions and material properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-model-fluid-flow": {
          "description": "engineering-model-fluid-flow",
          "prompt": "Develop numerical models for fluid flow phenomena like laminar and turbulent flow, pressure drop calculations, and flow visualization in the given code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-implement-kalman-filter": {
          "description": "engineering-implement-kalman-filter",
          "prompt": "Implement the Kalman filter algorithm for state estimation in the provided code, considering sensor noise, process dynamics, and measurement updates.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-solve-electromagnetic-problems": {
          "description": "engineering-solve-electromagnetic-problems",
          "prompt": "Write functions to solve electromagnetic problems like Maxwell's equations, wave propagation, and antenna design in the code context, employing finite difference or finite element methods.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-perform-control-system-analysis": {
          "description": "engineering-perform-control-system-analysis",
          "prompt": "Develop algorithms for control system analysis including stability analysis, frequency response, and controller design in the provided code, considering feedback loops and transfer functions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-chemical-reactions": {
          "description": "engineering-simulate-chemical-reactions",
          "prompt": "Implement simulation algorithms for chemical reactions and kinetics in the code snippet, considering reaction rates, species concentrations, and temperature dependencies.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-digital-filters": {
          "description": "engineering-design-digital-filters",
          "prompt": "Design digital filters for signal processing applications like low-pass, high-pass, and band-pass filters in the provided code, considering frequency response and filter order.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-calculate-finite-difference-methods": {
          "description": "engineering-calculate-finite-difference-methods",
          "prompt": "Write functions to solve partial differential equations (PDEs) using finite difference methods like explicit and implicit schemes in the code context, handling stability and accuracy.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-machine-learning-models": {
          "description": "engineering-optimize-machine-learning-models",
          "prompt": "Develop optimization algorithms for machine learning models including gradient descent, stochastic gradient descent, and metaheuristic algorithms in the given code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-power-systems": {
          "description": "engineering-simulate-power-systems",
          "prompt": "Implement simulation algorithms for power systems including load flow analysis, short circuit analysis, and transient stability analysis in the code snippet.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-complex-networks": {
          "description": "engineering-analyze-complex-networks",
          "prompt": "Write functions to analyze complex networks including social networks, transportation networks, and communication networks in the provided code, considering centrality metrics and connectivity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-model-thermal-fluid-systems": {
          "description": "engineering-model-thermal-fluid-systems",
          "prompt": "Develop mathematical models for thermal-fluid systems like HVAC systems, heat exchangers, and thermal energy storage in the code context, considering energy balances and fluid dynamics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-perform-vibration-analysis": {
          "description": "engineering-perform-vibration-analysis",
          "prompt": "Implement algorithms for vibration analysis including modal analysis, frequency response, and damping estimation in the provided code, considering structural dynamics and material properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-robotic-mechanisms": {
          "description": "engineering-simulate-robotic-mechanisms",
          "prompt": "Develop simulation algorithms for robotic mechanisms including kinematics, dynamics, and trajectory planning in the code snippet, considering joint limits and collision detection.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-production-processes": {
          "description": "engineering-optimize-production-processes",
          "prompt": "Implement optimization algorithms for production processes including scheduling, resource allocation, and inventory management in the provided code, considering cost and efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-power-electronics-systems": {
          "description": "engineering-analyze-power-electronics-systems",
          "prompt": "Write functions to analyze power electronics systems like converters, inverters, and motor drives in the code context, considering switching behavior and control strategies.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-calculate-acoustic-properties": {
          "description": "engineering-calculate-acoustic-properties",
          "prompt": "Develop algorithms to calculate acoustic properties like sound pressure level, reverberation time, and transmission loss in the provided code, considering room geometry and material properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-thermal-energy-systems": {
          "description": "engineering-simulate-thermal-energy-systems",
          "prompt": "Implement simulation algorithms for thermal energy systems including heat pumps, refrigeration cycles, and solar thermal systems in the code snippet, considering energy efficiency and environmental impact.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-computational-fluid-dynamics": {
          "description": "engineering-analyze-computational-fluid-dynamics",
          "prompt": "Write functions to analyze computational fluid dynamics (CFD) simulations in the provided code, considering turbulence modeling, boundary conditions, and grid generation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-embedded-systems": {
          "description": "engineering-design-embedded-systems",
          "prompt": "Develop algorithms for designing embedded systems including real-time control, sensor interfacing, and communication protocols in the code context, considering hardware constraints and reliability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-perform-reliability-analysis": {
          "description": "engineering-perform-reliability-analysis",
          "prompt": "Implement algorithms for reliability analysis including failure mode effects analysis (FMEA), fault tree analysis (FTA), and reliability block diagrams in the provided code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-material-properties": {
          "description": "engineering-simulate-material-properties",
          "prompt": "Develop simulation algorithms for material properties including stress-strain curves, fatigue life prediction, and fracture mechanics in the code snippet, considering material testing data and failure criteria.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-model-energy-storage-systems": {
          "description": "engineering-model-energy-storage-systems",
          "prompt": "Write functions to model energy storage systems like batteries, fuel cells, and capacitors in the provided code, considering electrochemical reactions and charge-discharge behavior.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-digital-communication-systems": {
          "description": "engineering-analyze-digital-communication-systems",
          "prompt": "Implement algorithms for analyzing digital communication systems including modulation schemes, channel coding, and error correction in the code context, considering noise and interference.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-thermal-management-systems": {
          "description": "engineering-optimize-thermal-management-systems",
          "prompt": "Develop optimization algorithms for thermal management systems including heat sinks, cooling fans, and thermal interface materials in the provided code, considering heat transfer and fluid dynamics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-renewable-energy-systems": {
          "description": "engineering-design-renewable-energy-systems",
          "prompt": "Write functions to design renewable energy systems like solar PV arrays, wind turbines, and hydroelectric generators in the code snippet, considering energy yield and economic feasibility.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-robotic-control-systems": {
          "description": "engineering-simulate-robotic-control-systems",
          "prompt": "Implement simulation algorithms for robotic control systems including inverse kinematics, trajectory planning, and motion control in the provided code, considering robot dynamics and sensor feedback.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-digital-filter-design": {
          "description": "engineering-optimize-digital-filter-design",
          "prompt": "Develop optimization algorithms for digital filter design including FIR and IIR filters in the provided code, considering frequency response specifications and filter order.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-feedback-control-systems": {
          "description": "engineering-design-feedback-control-systems",
          "prompt": "Write functions to design feedback control systems including PID controllers, state feedback, and observer-based controllers in the code context, considering stability and performance requirements.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-robotic-manipulators": {
          "description": "engineering-simulate-robotic-manipulators",
          "prompt": "Implement simulation algorithms for robotic manipulators including forward and inverse kinematics, Jacobian matrix, and trajectory generation in the provided code.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-industrial-processes": {
          "description": "engineering-optimize-industrial-processes",
          "prompt": "Develop optimization algorithms for industrial processes including chemical reactors, distillation columns, and heat exchangers in the code snippet, considering production yield and energy consumption.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-power-system-stability": {
          "description": "engineering-analyze-power-system-stability",
          "prompt": "Write functions to analyze power system stability including transient stability, voltage stability, and frequency stability in the provided code, considering generator dynamics and load characteristics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-robotic-vision-systems": {
          "description": "engineering-design-robotic-vision-systems",
          "prompt": "Develop algorithms for designing robotic vision systems including image processing, feature extraction, and object recognition in the code context, considering camera calibration and lighting conditions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-multibody-dynamics": {
          "description": "engineering-simulate-multibody-dynamics",
          "prompt": "Implement simulation algorithms for multibody dynamics systems including rigid bodies, joints, and constraints in the provided code, considering contact modeling and collision detection.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-telecommunication-networks": {
          "description": "engineering-optimize-telecommunication-networks",
          "prompt": "Develop optimization algorithms for telecommunication networks including routing, congestion control, and resource allocation in the code snippet, considering quality of service (QoS) and network latency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-electromagnetic-fields": {
          "description": "engineering-analyze-electromagnetic-fields",
          "prompt": "Write functions to analyze electromagnetic fields including Maxwell's equations, wave propagation, and antenna radiation patterns in the provided code, considering boundary conditions and material properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-optical-communication-systems": {
          "description": "engineering-design-optical-communication-systems",
          "prompt": "Develop algorithms for designing optical communication systems including fiber optic links, modulation formats, and signal processing in the code context, considering dispersion and noise effects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-vehicle-dynamics": {
          "description": "engineering-simulate-vehicle-dynamics",
          "prompt": "Implement simulation algorithms for vehicle dynamics including vehicle models, tire-road interaction, and suspension systems in the provided code, considering handling and stability analysis.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-manufacturing-processes": {
          "description": "engineering-optimize-manufacturing-processes",
          "prompt": "Develop optimization algorithms for manufacturing processes including machining, casting, and additive manufacturing in the code snippet, considering production cost and lead time.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-structural-dynamics": {
          "description": "engineering-analyze-structural-dynamics",
          "prompt": "Write functions to analyze structural dynamics including modal analysis, vibration modes, and dynamic response in the provided code, considering damping and external loads.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-embedded-control-systems": {
          "description": "engineering-design-embedded-control-systems",
          "prompt": "Develop algorithms for designing embedded control systems including real-time operating systems, sensor interfaces, and actuator control in the code context, considering reliability and safety.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-fluid-structure-interaction": {
          "description": "engineering-simulate-fluid-structure-interaction",
          "prompt": "Implement simulation algorithms for fluid-structure interaction (FSI) problems including fluid flow and structural deformation in the provided code, considering coupling methods and convergence criteria.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-chemical-reaction-processes": {
          "description": "engineering-optimize-chemical-reaction-processes",
          "prompt": "Develop optimization algorithms for chemical reaction processes including reactor design, catalyst selection, and reaction kinetics in the code snippet, considering yield and selectivity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-control-system-stability": {
          "description": "engineering-analyze-control-system-stability",
          "prompt": "Write functions to analyze control system stability including root locus, Nyquist criterion, and Bode plots in the provided code, considering controller tuning and frequency response.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-solar-energy-systems": {
          "description": "engineering-design-solar-energy-systems",
          "prompt": "Develop algorithms for designing solar energy systems including photovoltaic arrays, solar concentrators, and energy storage in the code context, considering geographical location and solar irradiance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-heat-transfer-processes": {
          "description": "engineering-simulate-heat-transfer-processes",
          "prompt": "Implement simulation algorithms for heat transfer processes including conduction, convection, and radiation in the provided code, considering thermal properties and boundary conditions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-vehicle-powertrain-design": {
          "description": "engineering-optimize-vehicle-powertrain-design",
          "prompt": "Develop optimization algorithms for vehicle powertrain design including engine sizing, transmission ratios, and drivetrain configurations in the code snippet, considering performance and fuel efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-nonlinear-dynamical-systems": {
          "description": "engineering-analyze-nonlinear-dynamical-systems",
          "prompt": "Write functions to analyze nonlinear dynamical systems including phase portraits, limit cycles, and bifurcations in the provided code, considering stability and chaos theory.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-wind-energy-systems": {
          "description": "engineering-design-wind-energy-systems",
          "prompt": "Develop algorithms for designing wind energy systems including wind turbine selection, wind farm layout, and power forecasting in the code context, considering wind resource assessment and turbine efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-hydraulic-systems": {
          "description": "engineering-simulate-hydraulic-systems",
          "prompt": "Implement simulation algorithms for hydraulic systems including fluid flow, pressure dynamics, and valve control in the provided code, considering hydraulic components and fluid properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-data-communication-networks": {
          "description": "engineering-optimize-data-communication-networks",
          "prompt": "Develop optimization algorithms for data communication networks including routing protocols, traffic engineering, and network security in the code snippet, considering scalability and reliability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-power-electronic-converters": {
          "description": "engineering-analyze-power-electronic-converters",
          "prompt": "Write functions to analyze power electronic converters including rectifiers, inverters, and converters in the provided code, considering switching losses and harmonic distortion.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-thermal-management-systems": {
          "description": "engineering-design-thermal-management-systems",
          "prompt": "Develop algorithms for designing thermal management systems including heat sinks, cooling fluids, and thermal insulation in the code context, considering heat dissipation and temperature regulation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-material-deformation": {
          "description": "engineering-simulate-material-deformation",
          "prompt": "Implement simulation algorithms for material deformation including plasticity, creep, and fatigue in the provided code, considering stress-strain behavior and material properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-energy-storage-systems": {
          "description": "engineering-optimize-energy-storage-systems",
          "prompt": "Develop optimization algorithms for energy storage systems including batteries, supercapacitors, and flywheels in the code snippet, considering energy density and cycle life.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-optical-fiber-networks": {
          "description": "engineering-analyze-optical-fiber-networks",
          "prompt": "Write functions to analyze optical fiber networks including dispersion, attenuation, and nonlinear effects in the provided code, considering signal integrity and wavelength division multiplexing.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-automated-control-systems": {
          "description": "engineering-design-automated-control-systems",
          "prompt": "Develop algorithms for designing automated control systems including PLC programming, industrial robots, and process automation in the code context, considering safety and reliability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-thermal-fluid-dynamics": {
          "description": "engineering-simulate-thermal-fluid-dynamics",
          "prompt": "Implement simulation algorithms for thermal-fluid dynamics including heat transfer, fluid flow, and phase change in the provided code, considering coupled phenomena and boundary conditions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-structural-performance": {
          "description": "engineering-optimize-structural-performance",
          "prompt": "Develop optimization algorithms for structural performance including stiffness optimization, material selection, and topology optimization in the code snippet, considering loading conditions and safety factors.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-digital-signal-processing-systems": {
          "description": "engineering-analyze-digital-signal-processing-systems",
          "prompt": "Write functions to analyze digital signal processing (DSP) systems including filter design, spectrum analysis, and signal reconstruction in the provided code, considering sampling rate and quantization effects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-green-building-systems": {
          "description": "engineering-design-green-building-systems",
          "prompt": "Develop algorithms for designing green building systems including passive solar design, energy-efficient HVAC systems, and rainwater harvesting in the code context, considering sustainability and energy savings.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-fluid-power-systems": {
          "description": "engineering-simulate-fluid-power-systems",
          "prompt": "Implement simulation algorithms for fluid power systems including hydraulic actuators, pneumatic cylinders, and fluid power control in the provided code, considering fluid properties and system dynamics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-communication-protocols": {
          "description": "engineering-optimize-communication-protocols",
          "prompt": "Develop optimization algorithms for communication protocols including TCP/IP, Ethernet, and wireless standards in the code snippet, considering throughput and latency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-automated-manufacturing-systems": {
          "description": "engineering-design-automated-manufacturing-systems",
          "prompt": "Develop algorithms for designing automated manufacturing systems including robotic assembly lines, CNC machining cells, and flexible manufacturing systems in the code context, considering production efficiency and adaptability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-electrochemical-processes": {
          "description": "engineering-simulate-electrochemical-processes",
          "prompt": "Implement simulation algorithms for electrochemical processes including electroplating, electrolysis, and battery charging/discharging in the provided code, considering electrode kinetics and mass transport.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-urban-transportation-systems": {
          "description": "engineering-optimize-urban-transportation-systems",
          "prompt": "Develop optimization algorithms for urban transportation systems including traffic signal timing, public transit routes, and ride-sharing services in the code snippet, considering congestion and environmental impact.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-wireless-communication-networks": {
          "description": "engineering-analyze-wireless-communication-networks",
          "prompt": "Write functions to analyze wireless communication networks including cellular networks, Wi-Fi systems, and satellite communication in the provided code, considering signal propagation and interference.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-hvac-systems": {
          "description": "engineering-design-hvac-systems",
          "prompt": "Develop algorithms for designing heating, ventilation, and air conditioning (HVAC) systems including duct layout, air distribution, and energy recovery in the code context, considering thermal comfort and energy efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-nanomaterials-properties": {
          "description": "engineering-simulate-nanomaterials-properties",
          "prompt": "Implement simulation algorithms for nanomaterials properties including quantum effects, surface phenomena, and mechanical behavior in the provided code, considering size effects and defect formation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-water-distribution-networks": {
          "description": "engineering-optimize-water-distribution-networks",
          "prompt": "Develop optimization algorithms for water distribution networks including pipe sizing, pump scheduling, and leakage detection in the code snippet, considering hydraulic constraints and water quality.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-digital-image-processing-techniques": {
          "description": "engineering-analyze-digital-image-processing-techniques",
          "prompt": "Write functions to analyze digital image processing techniques including image filtering, edge detection, and image segmentation in the provided code, considering noise reduction and feature extraction.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-sustainable-energy-systems": {
          "description": "engineering-design-sustainable-energy-systems",
          "prompt": "Develop algorithms for designing sustainable energy systems including renewable energy integration, energy storage optimization, and grid management in the code context, considering environmental impact and resource availability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-biomechanical-systems": {
          "description": "engineering-simulate-biomechanical-systems",
          "prompt": "Implement simulation algorithms for biomechanical systems including musculoskeletal models, joint kinematics, and tissue mechanics in the provided code, considering physiological constraints and movement dynamics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-waste-management-systems": {
          "description": "engineering-optimize-waste-management-systems",
          "prompt": "Develop optimization algorithms for waste management systems including recycling programs, landfill placement, and waste-to-energy facilities in the code snippet, considering environmental impact and resource recovery.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-robotic-path-planning-algorithms": {
          "description": "engineering-analyze-robotic-path-planning-algorithms",
          "prompt": "Write functions to analyze robotic path planning algorithms including A* search, RRT, and potential field methods in the provided code, considering obstacle avoidance and motion constraints.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-geothermal-energy-systems": {
          "description": "engineering-design-geothermal-energy-systems",
          "prompt": "Develop algorithms for designing geothermal energy systems including heat extraction methods, reservoir modeling, and thermal energy conversion in the code context, considering geological conditions and resource sustainability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-quantum-mechanical-systems": {
          "description": "engineering-simulate-quantum-mechanical-systems",
          "prompt": "Implement simulation algorithms for quantum mechanical systems including wavefunction propagation, quantum entanglement, and quantum computing operations in the provided code, considering decoherence and quantum error correction.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-transportation-logistics": {
          "description": "engineering-optimize-transportation-logistics",
          "prompt": "Develop optimization algorithms for transportation logistics including vehicle routing, inventory management, and supply chain optimization in the code snippet, considering cost minimization and delivery time constraints.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-bioinformatics-data": {
          "description": "engineering-analyze-bioinformatics-data",
          "prompt": "Write functions to analyze bioinformatics data including DNA sequencing, gene expression analysis, and protein structure prediction in the provided code, considering computational efficiency and biological significance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-smart-grid-systems": {
          "description": "engineering-design-smart-grid-systems",
          "prompt": "Develop algorithms for designing smart grid systems including demand response, distributed generation, and energy storage integration in the code context, considering grid reliability and renewable energy integration.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-neural-networks": {
          "description": "engineering-simulate-neural-networks",
          "prompt": "Implement simulation algorithms for neural networks including feedforward networks, recurrent networks, and convolutional networks in the provided code, considering activation functions and weight optimization.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-chemical-processes": {
          "description": "engineering-optimize-chemical-processes",
          "prompt": "Develop optimization algorithms for chemical processes including reaction kinetics, reactor design, and separation processes in the code snippet, considering product yield and process safety.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-satellite-communication-systems": {
          "description": "engineering-analyze-satellite-communication-systems",
          "prompt": "Write functions to analyze satellite communication systems including link budget analysis, modulation schemes, and error correction coding in the provided code, considering orbital dynamics and atmospheric effects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-microgrid-systems": {
          "description": "engineering-design-microgrid-systems",
          "prompt": "Develop algorithms for designing microgrid systems including renewable energy integration, energy management strategies, and islanding detection in the code context, considering grid resilience and local energy generation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-molecular-dynamics": {
          "description": "engineering-simulate-molecular-dynamics",
          "prompt": "Implement simulation algorithms for molecular dynamics including interatomic potentials, molecular interactions, and phase transitions in the provided code, considering time integration methods and statistical mechanics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-industrial-robotics": {
          "description": "engineering-optimize-industrial-robotics",
          "prompt": "Develop optimization algorithms for industrial robotics including path planning, robot scheduling, and task allocation in the code snippet, considering production efficiency and workspace constraints.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-spacecraft-orbit-dynamics": {
          "description": "engineering-analyze-spacecraft-orbit-dynamics",
          "prompt": "Write functions to analyze spacecraft orbit dynamics including orbital mechanics, trajectory optimization, and attitude control in the provided code, considering gravitational perturbations and orbital stability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-bio-inspired-robotics": {
          "description": "engineering-design-bio-inspired-robotics",
          "prompt": "Develop algorithms for designing bio-inspired robotics including biomimetic locomotion, soft robotics, and swarm intelligence in the code context, considering biological principles and robotic adaptability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-computational-chemistry-models": {
          "description": "engineering-simulate-computational-chemistry-models",
          "prompt": "Implement simulation algorithms for computational chemistry models including quantum chemistry, molecular dynamics, and density functional theory in the provided code, considering electronic structure and chemical reactions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-urban-infrastructure-systems": {
          "description": "engineering-optimize-urban-infrastructure-systems",
          "prompt": "Develop optimization algorithms for urban infrastructure systems including water distribution, transportation networks, and waste management in the code snippet, considering sustainability and resilience.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-medical-imaging-data": {
          "description": "engineering-analyze-medical-imaging-data",
          "prompt": "Write functions to analyze medical imaging data including MRI, CT, and ultrasound images in the provided code, considering image registration, segmentation, and feature extraction.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-aerospace-structures": {
          "description": "engineering-design-aerospace-structures",
          "prompt": "Develop algorithms for designing aerospace structures including aircraft fuselage, wings, and propulsion systems in the code context, considering aerodynamics and structural integrity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-semiconductor-devices": {
          "description": "engineering-simulate-semiconductor-devices",
          "prompt": "Implement simulation algorithms for semiconductor devices including diodes, transistors, and integrated circuits in the provided code, considering carrier transport and device characteristics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-telecommunication-network-security": {
          "description": "engineering-optimize-telecommunication-network-security",
          "prompt": "Develop optimization algorithms for telecommunication network security including encryption, authentication, and intrusion detection in the code snippet, considering cyber threats and data privacy.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-biological-systems-dynamics": {
          "description": "engineering-analyze-biological-systems-dynamics",
          "prompt": "Write functions to analyze biological systems dynamics including biochemical kinetics, metabolic pathways, and gene regulatory networks in the provided code, considering system stability and homeostasis.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-renewable-energy-microgrids": {
          "description": "engineering-design-renewable-energy-microgrids",
          "prompt": "Develop algorithms for designing renewable energy microgrids including solar PV systems, wind turbines, and energy storage in the code context, considering load balancing and grid integration.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-quantum-computing-circuits": {
          "description": "engineering-simulate-quantum-computing-circuits",
          "prompt": "Implement simulation algorithms for quantum computing circuits including quantum gates, quantum algorithms, and error correction in the provided code, considering qubit coherence and quantum entanglement.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-chemical-process-control": {
          "description": "engineering-optimize-chemical-process-control",
          "prompt": "Develop optimization algorithms for chemical process control including PID tuning, model predictive control, and adaptive control in the code snippet, considering process variability and disturbance rejection.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-power-system-transients": {
          "description": "engineering-analyze-power-system-transients",
          "prompt": "Write functions to analyze power system transients including fault currents, voltage sags, and switching events in the provided code, considering transient stability and protection coordination.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-tidal-energy-conversion-systems": {
          "description": "engineering-design-tidal-energy-conversion-systems",
          "prompt": "Develop algorithms for designing tidal energy conversion systems including tidal turbines, barrages, and tidal stream generators in the code context, considering ocean dynamics and energy extraction efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-biofluid-dynamics": {
          "description": "engineering-simulate-biofluid-dynamics",
          "prompt": "Implement simulation algorithms for biofluid dynamics including blood flow, respiratory airflow, and cerebrospinal fluid dynamics in the provided code, considering vessel geometry and fluid-structure interactions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-solar-panel-layouts": {
          "description": "engineering-optimize-solar-panel-layouts",
          "prompt": "Develop optimization algorithms for solar panel layouts including tilt angle optimization, shading analysis, and array configuration in the code snippet, considering solar irradiance and land use efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-wireless-sensor-networks": {
          "description": "engineering-analyze-wireless-sensor-networks",
          "prompt": "Write functions to analyze wireless sensor networks including node localization, data aggregation, and energy efficiency in the provided code, considering network coverage and data reliability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-marine-vehicles": {
          "description": "engineering-design-marine-vehicles",
          "prompt": "Develop algorithms for designing marine vehicles including ships, submarines, and autonomous underwater vehicles (AUVs) in the code context, considering hydrodynamics and vehicle maneuverability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-quantum-monte-carlo-methods": {
          "description": "engineering-simulate-quantum-monte-carlo-methods",
          "prompt": "Implement simulation algorithms for quantum Monte Carlo methods including variational Monte Carlo, diffusion Monte Carlo, and path integral Monte Carlo in the provided code, considering quantum state estimation and error control.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-manufacturing-quality-control": {
          "description": "engineering-optimize-manufacturing-quality-control",
          "prompt": "Develop optimization algorithms for manufacturing quality control including statistical process control, Six Sigma, and quality assurance in the code snippet, considering defect detection and process variability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-earthquake-engineering-designs": {
          "description": "engineering-analyze-earthquake-engineering-designs",
          "prompt": "Write functions to analyze earthquake engineering designs including structural response, ground motion analysis, and seismic retrofitting in the provided code, considering seismic hazard and building code requirements.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-advanced-automotive-systems": {
          "description": "engineering-design-advanced-automotive-systems",
          "prompt": "Develop algorithms for designing advanced automotive systems including autonomous driving, vehicle-to-vehicle communication, and electric propulsion in the code context, considering safety and vehicle performance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-plasma-physics-phenomena": {
          "description": "engineering-simulate-plasma-physics-phenomena",
          "prompt": "Implement simulation algorithms for plasma physics phenomena including plasma instabilities, magnetic confinement, and plasma heating in the provided code, considering particle kinetics and electromagnetic fields.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-biochemical-engineering-processes": {
          "description": "engineering-optimize-biochemical-engineering-processes",
          "prompt": "Develop optimization algorithms for biochemical engineering processes including fermentation, bioreactor design, and enzyme kinetics in the code snippet, considering product yield and substrate utilization.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-robotic-vision-algorithms": {
          "description": "engineering-analyze-robotic-vision-algorithms",
          "prompt": "Write functions to analyze robotic vision algorithms including object detection, pose estimation, and scene understanding in the provided code, considering camera calibration and image processing techniques.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-space-launch-vehicles": {
          "description": "engineering-design-space-launch-vehicles",
          "prompt": "Develop algorithms for designing space launch vehicles including rocket propulsion, trajectory optimization, and orbital mechanics in the code context, considering payload capacity and launch site location.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-nuclear-reactor-dynamics": {
          "description": "engineering-simulate-nuclear-reactor-dynamics",
          "prompt": "Implement simulation algorithms for nuclear reactor dynamics including neutron diffusion, reactor kinetics, and fuel depletion in the provided code, considering reactor safety and fuel cycle management.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-wind-turbine-designs": {
          "description": "engineering-optimize-wind-turbine-designs",
          "prompt": "Develop optimization algorithms for wind turbine designs including blade geometry, turbine size, and wind farm layout in the code snippet, considering aerodynamic efficiency and structural integrity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-quantum-dot-devices": {
          "description": "engineering-analyze-quantum-dot-devices",
          "prompt": "Write functions to analyze quantum dot devices including electronic structure, charge transport, and quantum confinement effects in the provided code, considering nanoscale phenomena and quantum coherence.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-intelligent-building-systems": {
          "description": "engineering-design-intelligent-building-systems",
          "prompt": "Develop algorithms for designing intelligent building systems including HVAC control, lighting automation, and occupancy detection in the code context, considering energy efficiency and occupant comfort.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-environmental-fluid-dynamics": {
          "description": "engineering-simulate-environmental-fluid-dynamics",
          "prompt": "Implement simulation algorithms for environmental fluid dynamics including atmospheric circulation, ocean currents, and pollutant dispersion in the provided code, considering fluid-terrain interaction and boundary layer phenomena.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-materials-selection-processes": {
          "description": "engineering-optimize-materials-selection-processes",
          "prompt": "Develop optimization algorithms for materials selection processes including material properties, lifecycle analysis, and sustainability metrics in the code snippet, considering cost and performance trade-offs.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-analyze-computational-electromagnetics": {
          "description": "engineering-analyze-computational-electromagnetics",
          "prompt": "Write functions to analyze computational electromagnetics including finite element analysis, method of moments, and finite-difference time-domain in the provided code, considering electromagnetic wave propagation and scattering.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-design-hydroelectric-power-systems": {
          "description": "engineering-design-hydroelectric-power-systems",
          "prompt": "Develop algorithms for designing hydroelectric power systems including dam design, turbine selection, and reservoir management in the code context, considering environmental impact and energy storage.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-simulate-nanostructure-properties": {
          "description": "engineering-simulate-nanostructure-properties",
          "prompt": "Implement simulation algorithms for nanostructure properties including electronic structure, thermal conductivity, and mechanical strength in the provided code, considering quantum confinement and surface effects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "engineering-optimize-vehicle-crashworthiness": {
          "description": "engineering-optimize-vehicle-crashworthiness",
          "prompt": "Develop optimization algorithms for vehicle crashworthiness including crash simulations, structural reinforcement, and occupant protection systems in the code snippet, considering impact dynamics and safety standards.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-particle-class": {
          "description": "physics-create-particle-class",
          "prompt": "Generate Python code to create a Particle class that represents particles with properties such as mass, position, velocity, and acceleration.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-calculate-kinetic-energy": {
          "description": "physics-calculate-kinetic-energy",
          "prompt": "Write a Python function to calculate the kinetic energy of a particle given its mass and velocity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-pendulum-motion": {
          "description": "physics-simulate-pendulum-motion",
          "prompt": "Develop Python code to simulate the motion of a simple pendulum using numerical integration methods like Euler's method or Runge-Kutta methods.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-conservation-laws": {
          "description": "physics-check-conservation-laws",
          "prompt": "Check the provided Python code to ensure implementation of conservation laws like energy or momentum conservation, providing feedback on correctness.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-review-numerical-simulation-accuracy": {
          "description": "physics-review-numerical-simulation-accuracy",
          "prompt": "Evaluate the numerical simulations in the code for physics, assessing the accuracy and stability of chosen methods and parameters.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-suggest-error-analysis-techniques": {
          "description": "physics-suggest-error-analysis-techniques",
          "prompt": "Suggest error analysis techniques applicable to the code for physics calculations, ensuring reliable and meaningful results.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-symbolic-math-usage": {
          "description": "physics-check-symbolic-math-usage",
          "prompt": "Inspect the code for usage of symbolic math libraries or methods (e.g., SymPy) in solving physics equations or symbolic manipulation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-assess-data-fitting-accuracy": {
          "description": "physics-assess-data-fitting-accuracy",
          "prompt": "Assess the accuracy of data fitting techniques employed in the code, ensuring the reliability of the results.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-calculate-electric-potential": {
          "description": "physics-calculate-electric-potential",
          "prompt": "Implement a Python function to calculate the electric potential at a point in space due to a distribution of charges, using Coulomb's law.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-solve-differential-equations": {
          "description": "physics-solve-differential-equations",
          "prompt": "Write Python code to solve ordinary differential equations representing physical systems, such as harmonic oscillators or radioactive decay.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-estimate-terminal-velocity": {
          "description": "physics-estimate-terminal-velocity",
          "prompt": "Estimate the terminal velocity of a falling object using Python code, considering gravitational force and air resistance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-quantum-oscillator": {
          "description": "physics-analyze-quantum-oscillator",
          "prompt": "Analyze the energy levels and wave functions of a quantum harmonic oscillator using Python code, considering potential energy functions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-fluid-dynamics": {
          "description": "physics-simulate-fluid-dynamics",
          "prompt": "Develop Python code to simulate fluid dynamics phenomena, such as flow around obstacles or vortex shedding, using numerical methods like Navier-Stokes equations.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-calculate-work-energy": {
          "description": "physics-calculate-work-energy",
          "prompt": "Write a Python function to calculate the work done on an object by a force, given the force vector and displacement vector.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-estimate-gravitational-wave-strain": {
          "description": "physics-estimate-gravitational-wave-strain",
          "prompt": "Estimate the strain caused by gravitational waves passing through space-time using Python code, based on the properties of the source.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-quantum-scattering": {
          "description": "physics-analyze-quantum-scattering",
          "prompt": "Analyze quantum scattering processes using Python code, considering potential energy barriers and transmission coefficients.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-calculate-electric-field-lines": {
          "description": "physics-calculate-electric-field-lines",
          "prompt": "Calculate and visualize electric field lines surrounding charged objects using Python code, based on Coulomb's law.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-thermal-conduction": {
          "description": "physics-simulate-thermal-conduction",
          "prompt": "Simulate thermal conduction in a material using Python code, considering Fourier's law of heat conduction and boundary conditions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-physical-processes": {
          "description": "physics-optimize-physical-processes",
          "prompt": "Develop optimization algorithms in Python to optimize physical processes such as energy conversion, material synthesis, or experimental design.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-cosmic-ray-interactions": {
          "description": "physics-analyze-cosmic-ray-interactions",
          "prompt": "Analyze interactions of cosmic rays with matter using Python code, considering particle energy, cross-sections, and secondary particle production.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-tunneling": {
          "description": "physics-simulate-quantum-tunneling",
          "prompt": "Simulate quantum tunneling phenomena using Python code, considering potential energy barriers and particle wave functions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-gravitational-wave-signals": {
          "description": "physics-create-gravitational-wave-signals",
          "prompt": "Generate synthetic gravitational wave signals using Python code, based on theoretical models of compact binary mergers or other astrophysical sources.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-quantum-spin-systems": {
          "description": "physics-analyze-quantum-spin-systems",
          "prompt": "Analyze quantum spin systems using Python code, considering spin interactions, magnetic fields, and quantum entanglement.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-calculate-photon-absorption-spectra": {
          "description": "physics-calculate-photon-absorption-spectra",
          "prompt": "Calculate photon absorption spectra for atoms or molecules using Python code, based on quantum mechanical transitions and selection rules.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-chaotic-dynamical-systems": {
          "description": "physics-simulate-chaotic-dynamical-systems",
          "prompt": "Simulate chaotic dynamical systems using Python code, such as the double pendulum or the Lorenz system, and analyze their behavior.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-neutrino-oscillations": {
          "description": "physics-analyze-neutrino-oscillations",
          "prompt": "Analyze neutrino oscillation phenomena using Python code, considering flavor mixing, mass eigenstates, and oscillation probabilities.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-solar-system-models": {
          "description": "physics-create-solar-system-models",
          "prompt": "Create Python code to model the dynamics of celestial bodies in the solar system, considering gravitational interactions and orbital parameters.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-kinetic-energy-function": {
          "description": "physics-check-kinetic-energy-function",
          "prompt": "Review the Python function for calculating kinetic energy to ensure it correctly accounts for mass and velocity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-pendulum-simulation": {
          "description": "physics-check-pendulum-simulation",
          "prompt": "Examine the Python code for simulating pendulum motion to verify the accuracy of the numerical integration method used.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-electric-potential-function": {
          "description": "physics-validate-electric-potential-function",
          "prompt": "Validate the Python function for calculating electric potential to ensure it adheres to Coulomb's law and produces accurate results.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-review-differential-equations-solver": {
          "description": "physics-review-differential-equations-solver",
          "prompt": "Inspect the Python code for solving differential equations to assess the robustness and accuracy of the chosen solver method.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-evaluate-thermal-conduction-simulation": {
          "description": "physics-evaluate-thermal-conduction-simulation",
          "prompt": "Evaluate the Python simulation of thermal conduction to verify its adherence to Fourier's law and proper handling of boundary conditions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-artificial-life": {
          "description": "physics-create-quantum-artificial-life",
          "prompt": "Generate Python code to simulate the emergence of artificial life forms in a quantum computational environment, exploring the interplay between quantum coherence and evolutionary dynamics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-fractal-generator": {
          "description": "physics-design-quantum-fractal-generator",
          "prompt": "Design Python code to generate fractal patterns using principles of quantum computing, leveraging quantum superposition and entanglement to produce complex and visually intriguing structures.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-implement-cosmic-ray-particle-tracker": {
          "description": "physics-implement-cosmic-ray-particle-tracker",
          "prompt": "Implement Python code to track the trajectories of cosmic ray particles detected by a simulated cosmic ray detector array, visualizing their paths and analyzing their energy distributions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-chaos-simulator": {
          "description": "physics-create-quantum-chaos-simulator",
          "prompt": "Develop Python code to simulate chaotic quantum systems, exploring phenomena such as quantum chaos, quantum mixing, and dynamical localization in complex quantum landscapes.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-noise-reduction-algorithm": {
          "description": "physics-check-noise-reduction-algorithm",
          "prompt": "Evaluate the effectiveness of a Python noise reduction algorithm applied to experimental data from a cosmic ray detector, ensuring accurate signal extraction and background noise suppression.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-quantum-error-correction-code": {
          "description": "physics-optimize-quantum-error-correction-code",
          "prompt": "Optimize Python code implementing quantum error correction algorithms for fault-tolerant quantum computing, minimizing resource overhead while maximizing error detection and correction capabilities.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-holographic-universe-simulator": {
          "description": "physics-create-holographic-universe-simulator",
          "prompt": "Create Python code to simulate a holographic universe model based on principles of quantum gravity, exploring the holographic principle and its implications for spacetime geometry and information encoding.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-cryptography-protocol": {
          "description": "physics-design-quantum-cryptography-protocol",
          "prompt": "Design a Python protocol for quantum cryptography, leveraging principles of quantum entanglement and uncertainty to ensure secure communication channels resistant to eavesdropping and interception.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-dark-matter-simulation": {
          "description": "physics-analyze-dark-matter-simulation",
          "prompt": "Analyze Python simulation data of dark matter distributions in cosmological structures, investigating the clustering properties of dark matter halos and their correlations with visible matter.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-verify-higgs-boson-detection-algorithm": {
          "description": "physics-verify-higgs-boson-detection-algorithm",
          "prompt": "Verify the correctness of a Python algorithm for detecting Higgs boson events in particle collision data from a simulated collider experiment, ensuring reliable identification of signal events amidst background noise.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-implement-quantum-computational-algorithm": {
          "description": "physics-implement-quantum-computational-algorithm",
          "prompt": "Implement a Python algorithm for quantum computation, such as Grover's search algorithm or Shor's factoring algorithm, demonstrating quantum speedup and analyzing its computational complexity.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-gravitational-wave-data-analysis": {
          "description": "physics-check-gravitational-wave-data-analysis",
          "prompt": "Examine Python code for analyzing gravitational wave data from a network of detectors, verifying the accuracy of parameter estimation techniques and assessing the significance of detected signals.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-neutrino-oscillation-model": {
          "description": "physics-validate-neutrino-oscillation-model",
          "prompt": "Validate a Python model of neutrino oscillations against experimental data, comparing predicted neutrino flavor transitions with observed event rates in neutrino oscillation experiments.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-material-properties": {
          "description": "physics-simulate-quantum-material-properties",
          "prompt": "Simulate the electronic and magnetic properties of quantum materials using Python code, exploring phenomena such as topological insulators, spin liquids, and quantum criticality.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-magnetic-monopole-simulator": {
          "description": "physics-create-magnetic-monopole-simulator",
          "prompt": "Develop Python code to simulate the behavior of magnetic monopoles in condensed matter systems, investigating emergent magnetic fields, magnetic flux quantization, and topological defects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-quantum-entanglement-dynamics": {
          "description": "physics-analyze-quantum-entanglement-dynamics",
          "prompt": "Analyze the dynamics of quantum entanglement in multipartite quantum systems using Python code, characterizing entanglement measures, entanglement entropy, and entanglement propagation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-information-protocol": {
          "description": "physics-design-quantum-information-protocol",
          "prompt": "Design a Python protocol for quantum information processing tasks, such as quantum teleportation, quantum key distribution, or quantum error correction, optimizing resource usage and protocol efficiency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-photonics-simulation-tool": {
          "description": "physics-create-photonics-simulation-tool",
          "prompt": "Create Python code for simulating photonic devices and systems, such as waveguides, photodetectors, or optical resonators, modeling light propagation, interference, and absorption.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-quantum-spin-transport": {
          "description": "physics-analyze-quantum-spin-transport",
          "prompt": "Analyze spin transport phenomena in quantum materials using Python code, studying spin dynamics, spin relaxation mechanisms, and spin-dependent transport properties.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-implement-quantum-phase-estimation": {
          "description": "physics-implement-quantum-phase-estimation",
          "prompt": "Implement the quantum phase estimation algorithm in Python, demonstrating its application in quantum metrology, quantum cryptography, or quantum simulations.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-quantum-state-preparation": {
          "description": "physics-optimize-quantum-state-preparation",
          "prompt": "Optimize Python code for preparing quantum states with specific properties, such as superposition states, entangled states, or coherent states, maximizing fidelity and minimizing errors.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-gravitational-lensing-simulation": {
          "description": "physics-check-gravitational-lensing-simulation",
          "prompt": "Verify the accuracy of a Python simulation of gravitational lensing effects caused by massive objects in space, comparing simulated images with observed gravitational lensing phenomena.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-dark-energy-model": {
          "description": "physics-validate-dark-energy-model",
          "prompt": "Validate a Python model of dark energy against observational data from cosmological surveys, assessing the agreement between predicted cosmic expansion rates and measurements of supernova luminosity distances.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-walks": {
          "description": "physics-simulate-quantum-walks",
          "prompt": "Simulate quantum walks in Python, exploring their applications in quantum algorithms, quantum search, and quantum simulations of complex networks and physical systems.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-error-correction-simulator": {
          "description": "physics-create-quantum-error-correction-simulator",
          "prompt": "Develop Python code to simulate quantum error correction codes and error correction protocols, analyzing their performance in protecting quantum information against noise and decoherence.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-implement-quantum-computing-gates": {
          "description": "physics-implement-quantum-computing-gates",
          "prompt": "Implement basic quantum computing gates in Python, such as Pauli-X, Pauli-Y, Pauli-Z, Hadamard, or CNOT gates, demonstrating their unitary transformations and quantum circuit construction.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-quantum-tunneling-simulation": {
          "description": "physics-check-quantum-tunneling-simulation",
          "prompt": "Review a Python simulation of quantum tunneling phenomena in nanoscale systems, ensuring accurate modeling of tunneling barriers, transmission probabilities, and tunneling currents.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-neutron-star-equation-of-state": {
          "description": "physics-validate-neutron-star-equation-of-state",
          "prompt": "Validate theoretical models of neutron star equation of state using Python code, comparing predictions of neutron star mass-radius relations with observational constraints from pulsar timing and gravitational wave measurements.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-hall-effect": {
          "description": "physics-simulate-quantum-hall-effect",
          "prompt": "Simulate the quantum Hall effect in Python, exploring topological properties of quantum Hall states, quantized Hall conductivity, and edge states in two-dimensional electron systems under magnetic fields.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-metrology-setup": {
          "description": "physics-design-quantum-metrology-setup",
          "prompt": "Design a Python code for a quantum metrology setup, optimizing parameters such as measurement precision, signal-to-noise ratio, and sensitivity to quantum states, for applications in precision measurements and quantum sensing.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-computing-simulator": {
          "description": "physics-create-quantum-computing-simulator",
          "prompt": "Develop a Python simulator for quantum computing, allowing users to construct quantum circuits, simulate quantum algorithms, and analyze quantum states and measurements.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-quantum-spin-hall-effect": {
          "description": "physics-analyze-quantum-spin-hall-effect",
          "prompt": "Analyze the quantum spin Hall effect using Python code, studying spin currents, spin Hall conductivity, and spin-orbit interactions in two-dimensional topological insulators.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-quantum-teleportation-protocol": {
          "description": "physics-optimize-quantum-teleportation-protocol",
          "prompt": "Optimize Python code implementing the quantum teleportation protocol, minimizing resource requirements and optimizing fidelity and success rates of quantum state teleportation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-neutron-star-merger-simulation": {
          "description": "physics-check-neutron-star-merger-simulation",
          "prompt": "Inspect Python simulation data of neutron star mergers, verifying the accuracy of gravitational waveforms, post-merger remnants, and electromagnetic counterparts predicted by the simulation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-cosmological-inflation-model": {
          "description": "physics-validate-cosmological-inflation-model",
          "prompt": "Validate theoretical models of cosmological inflation using Python code, comparing predictions of cosmic microwave background anisotropies, primordial gravitational waves, and large-scale structure formation with observational data.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-chaotic-dynamics": {
          "description": "physics-simulate-quantum-chaotic-dynamics",
          "prompt": "Simulate chaotic quantum dynamics in Python, exploring phenomena such as quantum chaos signatures, spectral statistics, and quantum ergodicity in complex quantum systems.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-neural-network-for-particle-identification": {
          "description": "physics-create-neural-network-for-particle-identification",
          "prompt": "Develop a neural network model in Python for particle identification in high-energy physics experiments, training the model on simulated particle collision data and evaluating its performance metrics.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-robotics-algorithm": {
          "description": "physics-design-quantum-robotics-algorithm",
          "prompt": "Design a quantum robotics algorithm in Python for autonomous navigation and decision-making tasks, leveraging quantum algorithms for path planning, obstacle avoidance, and sensor fusion.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-dot-cavity-emission": {
          "description": "physics-simulate-quantum-dot-cavity-emission",
          "prompt": "Simulate photon emission from quantum dots embedded in optical cavities using Python code, modeling cavity quantum electrodynamics effects such as Purcell enhancement and photon blockade.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-magnetic-domain-wall-motion": {
          "description": "physics-analyze-magnetic-domain-wall-motion",
          "prompt": "Analyze the dynamics of magnetic domain walls in ferromagnetic materials using Python code, studying phenomena such as domain wall propagation, pinning, and chirality effects.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-game-theory-simulator": {
          "description": "physics-create-quantum-game-theory-simulator",
          "prompt": "Develop a Python simulator for quantum game theory, allowing players to interact with quantum strategies, entangled states, and quantum payoff functions to explore the dynamics of quantum games.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-quantum-cryptography-protocol": {
          "description": "physics-optimize-quantum-cryptography-protocol",
          "prompt": "Optimize a Python quantum cryptography protocol for secure key distribution, minimizing vulnerability to eavesdropping attacks and maximizing key generation rates in practical quantum communication networks.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-simulation-experiment": {
          "description": "physics-design-quantum-simulation-experiment",
          "prompt": "Design an experiment for quantum simulation using Python, specifying the quantum system to be simulated, the control parameters to be varied, and the measurement techniques to extract relevant observables.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-quantum-error-correction-code": {
          "description": "physics-check-quantum-error-correction-code",
          "prompt": "Check the correctness and efficiency of a Python implementation of a quantum error correction code, verifying its ability to protect quantum information against noise and errors in quantum circuits.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-dark-matter-model": {
          "description": "physics-validate-dark-matter-model",
          "prompt": "Validate a theoretical model of dark matter using Python, comparing predictions of dark matter distribution profiles, halo structures, and cosmological implications with observational constraints from galaxy surveys and gravitational lensing.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-communication-protocols": {
          "description": "physics-simulate-quantum-communication-protocols",
          "prompt": "Simulate quantum communication protocols in Python, such as quantum key distribution, quantum teleportation, or quantum secret sharing, to analyze their performance under realistic noise and channel conditions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-implement-quantum-algorithm-for-quantum-chemistry": {
          "description": "physics-implement-quantum-algorithm-for-quantum-chemistry",
          "prompt": "Implement a Python algorithm for quantum chemistry simulations on quantum computers, demonstrating its advantage over classical methods in solving molecular electronic structure problems and simulating chemical reactions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-robotic-control-strategy": {
          "description": "physics-design-quantum-robotic-control-strategy",
          "prompt": "Design a quantum control strategy for robotic systems in Python, optimizing quantum feedback and feedforward control techniques to achieve precision motion control and adaptive behavior in quantum-enabled robots.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-quantum-dot-spin-qubits": {
          "description": "physics-analyze-quantum-dot-spin-qubits",
          "prompt": "Analyze the coherence and decoherence properties of quantum dot spin qubits using Python code, studying spin relaxation mechanisms, spin coherence times, and spin qubit gate fidelities in semiconductor nanostructures.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-quantum-information-processing-circuit": {
          "description": "physics-optimize-quantum-information-processing-circuit",
          "prompt": "Optimize a Python quantum information processing circuit for specific quantum computing tasks, such as quantum error correction, quantum search, or quantum simulation, maximizing computational efficiency and scalability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-neural-network-model": {
          "description": "physics-create-quantum-neural-network-model",
          "prompt": "Develop a Python model for quantum neural networks, exploring architectures such as quantum Boltzmann machines, quantum Hopfield networks, or variational quantum circuits for pattern recognition and machine learning tasks.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-quantum-dot-single-photon-source": {
          "description": "physics-check-quantum-dot-single-photon-source",
          "prompt": "Check the performance of a Python simulation of a quantum dot single-photon source, assessing its photon emission statistics, photon indistinguishability, and suppression of multiphoton emission events.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-topological-quantum-computation-model": {
          "description": "physics-validate-topological-quantum-computation-model",
          "prompt": "Validate a theoretical model of topological quantum computation using Python, demonstrating the robustness of topological qubits against local errors and the fault-tolerance of topological quantum error correction codes.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-cosmic-ray-air-shower": {
          "description": "physics-simulate-cosmic-ray-air-shower",
          "prompt": "Simulate cosmic ray air showers using Python, modeling the propagation and interactions of high-energy cosmic rays with Earth's atmosphere and predicting the resulting shower profiles and particle distributions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-cryptography-simulator": {
          "description": "physics-create-quantum-cryptography-simulator",
          "prompt": "Develop a Python simulator for quantum cryptography protocols, allowing users to simulate quantum key distribution, quantum coin flipping, or quantum secret sharing protocols to assess their security and performance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-quantum-phase-estimation-algorithm": {
          "description": "physics-optimize-quantum-phase-estimation-algorithm",
          "prompt": "Optimize a Python implementation of the quantum phase estimation algorithm, reducing the number of qubits and gates required while maintaining high accuracy and precision in estimating quantum phases.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-machine-learning-model": {
          "description": "physics-design-quantum-machine-learning-model",
          "prompt": "Design a Python model for quantum machine learning tasks, integrating quantum feature maps, quantum kernels, or quantum circuits with classical machine learning algorithms for enhanced pattern recognition and data analysis.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-analyze-gravitational-wave-source-signals": {
          "description": "physics-analyze-gravitational-wave-source-signals",
          "prompt": "Analyze simulated gravitational wave signals from compact binary mergers using Python, characterizing waveform properties, chirp signals, and post-merger ringdown frequencies to infer source parameters.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-dark-energy-equation-of-state": {
          "description": "physics-validate-dark-energy-equation-of-state",
          "prompt": "Validate models of dark energy equation of state using Python, comparing predictions of cosmic acceleration rates, cosmic expansion history, and large-scale structure growth with observational data from cosmic surveys.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-levitation-effect": {
          "description": "physics-simulate-quantum-levitation-effect",
          "prompt": "Simulate the quantum levitation effect using Python, modeling the interaction between superconducting materials and magnetic fields to demonstrate magnetic flux pinning, Meissner effect, and levitation phenomena.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-create-quantum-error-correction-demonstration": {
          "description": "physics-create-quantum-error-correction-demonstration",
          "prompt": "Create a Python demonstration of quantum error correction techniques, illustrating concepts such as stabilizer codes, syndrome measurement, and error correction circuits for protecting quantum information against noise.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-optimize-quantum-neural-network-training": {
          "description": "physics-optimize-quantum-neural-network-training",
          "prompt": "Optimize the training process of a quantum neural network in Python, employing techniques such as gradient descent, quantum gradient estimation, or parameter optimization to enhance convergence and performance.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-design-quantum-encryption-protocol": {
          "description": "physics-design-quantum-encryption-protocol",
          "prompt": "Design a Python protocol for quantum encryption, incorporating features such as quantum key distribution, quantum one-time pad, or quantum key agreement to ensure secure communication channels resistant to quantum attacks.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-implement-topological-quantum-computer-simulator": {
          "description": "physics-implement-topological-quantum-computer-simulator",
          "prompt": "Implement a Python simulator for topological quantum computers, modeling topological qubits, braiding operations, and topological error correction codes to demonstrate fault-tolerant quantum computation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-simulate-quantum-circuit-teleportation": {
          "description": "physics-simulate-quantum-circuit-teleportation",
          "prompt": "Simulate quantum circuit teleportation in Python, demonstrating the transfer of quantum states between distant qubits through entanglement swapping, Bell measurement, and classical communication.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-check-quantum-annealing-optimization-algorithm": {
          "description": "physics-check-quantum-annealing-optimization-algorithm",
          "prompt": "Check the performance of a Python quantum annealing optimization algorithm, evaluating its ability to find optimal solutions for combinatorial optimization problems by minimizing energy functions on quantum annealers.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-validate-quantum-dot-solar-cell-model": {
          "description": "physics-validate-quantum-dot-solar-cell-model",
          "prompt": "Validate theoretical models of quantum dot solar cells using Python, comparing predictions of photovoltaic efficiency, charge carrier dynamics, and spectral response with experimental measurements.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "physics-implement-quantum-error-correction-scheme": {
          "description": "physics-implement-quantum-error-correction-scheme",
          "prompt": "Implement a Python scheme for quantum error correction, demonstrating techniques such as quantum error detection, error syndromes, and error correction codes to protect quantum information from noise.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-bot-instance": {
          "description": "discordjs-create-bot-instance",
          "prompt": "Create a new instance of a Discord bot using Discord.js, initializing the bot with necessary configurations such as token authentication and event handling.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-bot-instance": {
          "description": "discordpy-create-bot-instance",
          "prompt": "Initialize a Discord bot instance using Discord.py, setting up the bot token and defining event listeners for message handling and command execution.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-handle-message-events": {
          "description": "discordjs-handle-message-events",
          "prompt": "Implement message event handlers in Discord.js to listen for incoming messages in Discord channels, processing user commands and triggering appropriate bot responses.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-handle-message-events": {
          "description": "discordpy-handle-message-events",
          "prompt": "Define message event listeners in Discord.py to intercept messages sent to Discord channels, parsing user commands and executing corresponding bot actions or commands.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-command-handler": {
          "description": "discordjs-create-command-handler",
          "prompt": "Develop a command handling system in Discord.js to parse user commands prefixed with a designated bot command prefix, routing commands to appropriate command handlers for execution.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-command-handler": {
          "description": "discordpy-create-command-handler",
          "prompt": "Design a command handling mechanism in Discord.py to process user commands triggered by a specified command prefix, mapping commands to corresponding bot command functions or methods.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-basic-commands": {
          "description": "discordjs-implement-basic-commands",
          "prompt": "Implement basic bot commands in Discord.js, such as !help, !ping, or !info, to provide users with information about the bot, check bot connectivity, or retrieve server/channel details.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-basic-commands": {
          "description": "discordpy-implement-basic-commands",
          "prompt": "Create fundamental bot commands in Discord.py, including commands like !help, !ping, or !info, to deliver bot information, assess bot responsiveness, or fetch server/channel metadata.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-moderation-commands": {
          "description": "discordjs-create-moderation-commands",
          "prompt": "Develop moderation commands for Discord.js bot, such as !kick, !ban, or !mute, to enable server administrators to manage user behavior, enforce rules, and maintain server discipline.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-moderation-commands": {
          "description": "discordpy-create-moderation-commands",
          "prompt": "Build moderation functionalities for Discord.py bot, incorporating commands like !kick, !ban, or !mute, to empower server moderators to enforce community guidelines and moderate user behavior.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-music-bot": {
          "description": "discordjs-create-music-bot",
          "prompt": "Develop a music bot using Discord.js, implementing features such as !play, !pause, !skip, or !queue to enable users to play, pause, skip, and manage music playback in Discord voice channels.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-music-bot": {
          "description": "discordpy-create-music-bot",
          "prompt": "Craft a music bot with Discord.py, incorporating functionalities like !play, !pause, !skip, or !queue to facilitate music streaming, playback control, and playlist management in Discord voice channels.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-integrate-database-with-bot": {
          "description": "discordjs-integrate-database-with-bot",
          "prompt": "Integrate a database with a Discord.js bot, enabling data persistence for user preferences, server configurations, or custom bot settings across bot sessions and server restarts.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-integrate-database-with-bot": {
          "description": "discordpy-integrate-database-with-bot",
          "prompt": "Incorporate a database into a Discord.py bot, allowing for storage and retrieval of user data, server settings, or dynamic content to enhance bot functionality and customization.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-administration-commands": {
          "description": "discordjs-create-administration-commands",
          "prompt": "Create administration commands for Discord.js bot administrators, such as !configure, !setprefix, or !setrole, to manage bot settings, customize bot behavior, and configure server-specific features.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-administration-commands": {
          "description": "discordpy-create-administration-commands",
          "prompt": "Implement administration functionalities in Discord.py bot, including commands like !configure, !setprefix, or !setrole, to empower bot administrators to adjust bot configurations and manage server settings.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-custom-reaction-bot": {
          "description": "discordjs-create-custom-reaction-bot",
          "prompt": "Develop a custom reaction bot using Discord.js, allowing users to define custom trigger keywords or phrases and corresponding bot responses or reactions for personalized interactions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-custom-reaction-bot": {
          "description": "discordpy-create-custom-reaction-bot",
          "prompt": "Build a custom reaction bot with Discord.py, enabling users to set up personalized trigger phrases and predefined bot reactions or responses for engaging and interactive Discord interactions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-role-management-commands": {
          "description": "discordjs-implement-role-management-commands",
          "prompt": "Implement role management commands for Discord.js bot, such as !addrole, !removerole, or !assignrole, to facilitate user role assignment, removal, and management within Discord servers.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-role-management-commands": {
          "description": "discordpy-implement-role-management-commands",
          "prompt": "Design role management functionalities for Discord.py bot, incorporating commands like !addrole, !removerole, or !assignrole, to streamline user role management and permissions in Discord communities.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-welcome-goodbye-messages": {
          "description": "discordjs-create-welcome-goodbye-messages",
          "prompt": "Create welcome and goodbye messages for Discord.js bot, generating personalized greetings for new members joining the server and farewell messages for members leaving the server.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-welcome-goodbye-messages": {
          "description": "discordpy-create-welcome-goodbye-messages",
          "prompt": "Craft welcome and goodbye messages with Discord.py bot, delivering customized welcome notes to new server members upon joining and farewell messages to departing members.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-moderation-log": {
          "description": "discordjs-implement-moderation-log",
          "prompt": "Implement a moderation log feature in Discord.js bot, logging moderator actions such as kicks, bans, or warnings, along with relevant details and timestamps for auditing and transparency.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-moderation-log": {
          "description": "discordpy-implement-moderation-log",
          "prompt": "Set up a moderation log system in Discord.py bot, recording moderator actions like kicks, bans, or warnings, along with associated user IDs, reasons, and timestamps for administrative review.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-embed-messages": {
          "description": "discordjs-create-embed-messages",
          "prompt": "Generate embed messages with Discord.js bot, designing visually appealing and informative message layouts using embed fields, titles, descriptions, and color schemes to enhance message presentation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-embed-messages": {
          "description": "discordpy-create-embed-messages",
          "prompt": "Craft embed messages in Discord.py bot, creating structured and stylized message formats with embed titles, descriptions, fields, and color options to improve the visual appeal and readability of bot responses.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-reaction-roles": {
          "description": "discordjs-implement-reaction-roles",
          "prompt": "Implement reaction roles feature in Discord.js bot, allowing users to assign themselves roles by reacting to designated emoji messages, facilitating role-based access and community engagement.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-reaction-roles": {
          "description": "discordpy-implement-reaction-roles",
          "prompt": "Integrate reaction roles functionality into Discord.py bot, enabling users to self-assign roles by reacting to specified emoji messages, enhancing user engagement and role customization options.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-command-permissions": {
          "description": "discordjs-create-command-permissions",
          "prompt": "Set up command permissions in Discord.js bot, defining access levels or role requirements for specific bot commands to restrict command usage and maintain server security and moderation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-command-permissions": {
          "description": "discordpy-create-command-permissions",
          "prompt": "Configure command permissions in Discord.py bot, specifying access restrictions or role prerequisites for individual bot commands to manage command usage permissions and ensure server moderation.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-command-aliases": {
          "description": "discordjs-implement-command-aliases",
          "prompt": "Implement command aliases in Discord.js bot, allowing users to invoke bot commands using alternative aliases or shortcuts, enhancing command usability and user convenience.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-command-aliases": {
          "description": "discordpy-implement-command-aliases",
          "prompt": "Introduce command aliases in Discord.py bot, enabling users to trigger bot commands using predefined aliases or aliases defined by server administrators, improving command accessibility and usability.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-auto-mod-features": {
          "description": "discordjs-create-auto-mod-features",
          "prompt": "Develop auto-moderation features for Discord.js bot, implementing automated moderation mechanisms to detect and handle spam, profanity, or inappropriate content in Discord servers.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-auto-mod-features": {
          "description": "discordpy-create-auto-mod-features",
          "prompt": "Design auto-moderation capabilities for Discord.py bot, integrating automated moderation tools to identify and address spam, offensive language, or unwanted content in Discord communities.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-reaction-commands": {
          "description": "discordjs-implement-reaction-commands",
          "prompt": "Implement reaction-based commands in Discord.js bot, allowing users to trigger bot actions or execute commands by reacting to specific emoji prompts, enhancing user interaction and engagement.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-reaction-commands": {
          "description": "discordpy-implement-reaction-commands",
          "prompt": "Incorporate reaction-driven commands into Discord.py bot, enabling users to initiate bot actions or command execution by reacting to designated emoji messages, fostering interactive bot experiences.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-custom-command-cooldowns": {
          "description": "discordjs-create-custom-command-cooldowns",
          "prompt": "Create custom command cooldowns in Discord.js bot, setting cooldown durations and cooldown types for individual bot commands to regulate command usage frequency and prevent spamming.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-custom-command-cooldowns": {
          "description": "discordpy-create-custom-command-cooldowns",
          "prompt": "Set up personalized command cooldowns in Discord.py bot, configuring cooldown timers and cooldown behaviors for specific bot commands to manage command usage rates and prevent abuse.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-voice-channel-commands": {
          "description": "discordjs-implement-voice-channel-commands",
          "prompt": "Implement voice channel commands in Discord.js bot, enabling users to control bot behavior, music playback, or voice interactions through text commands while connected to Discord voice channels.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-voice-channel-commands": {
          "description": "discordpy-implement-voice-channel-commands",
          "prompt": "Integrate voice channel functionalities into Discord.py bot, allowing users to manage bot actions, music playback, or voice interactions using text commands while actively connected to Discord voice channels.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-custom-events": {
          "description": "discordjs-create-custom-events",
          "prompt": "Develop custom event handlers in Discord.js bot, defining event listeners and callback functions for custom events or bot-specific triggers to execute specialized bot actions or commands.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-custom-events": {
          "description": "discordpy-create-custom-events",
          "prompt": "Design custom event handling mechanisms in Discord.py bot, registering event listeners and event handlers for custom events or bot-specific triggers to initiate tailored bot responses or behaviors.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-create-interactive-games": {
          "description": "discordjs-create-interactive-games",
          "prompt": "Create interactive games with Discord.js bot, designing text-based or reaction-based games such as trivia, quizzes, or mini-games to entertain users and foster community engagement.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-create-interactive-games": {
          "description": "discordpy-create-interactive-games",
          "prompt": "Craft interactive game experiences using Discord.py bot, developing text-based or reaction-driven games like trivia challenges, quizzes, or interactive stories to entertain Discord server members.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordjs-implement-command-error-handling": {
          "description": "discordjs-implement-command-error-handling",
          "prompt": "Implement command error handling in Discord.js bot, creating error handlers to gracefully handle command execution errors, invalid command invocations, or unexpected bot behaviors.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        },
        "discordpy-implement-command-error-handling": {
          "description": "discordpy-implement-command-error-handling",
          "prompt": "Handle command errors effectively in Discord.py bot, setting up error handling mechanisms to catch and manage command execution failures, user input errors, or unexpected bot malfunctions.",
          "context": {
            "codebase": true,
            "selection": true,
            "currentFile": true
          }
        }
      }
    }